!SESSION 2022-11-07 12:26:22.537 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data C:\Users\balaz\Desktop\2DGame\.metadata -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-07 12:26:26.726
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-07 12:26:26.726
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-07 12:26:26.726
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-07 12:26:30.158
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-11-28 19:56:37.428 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=19.0.1
java.vendor=BellSoft
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data C:\Users\balaz\Desktop\2DGame-main\.metadata -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 4 567 2022-11-28 19:56:40.073
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2022-11-28 19:56:40.073
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2022-11-28 19:56:40.075
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jface 2 0 2022-11-28 19:56:43.522
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-28 19:56:43.522
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-28 19:56:43.523
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-28 19:56:47.470
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-11-28 20:02:08.671 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=19.0.1
java.vendor=BellSoft
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 4 567 2022-11-28 20:02:18.609
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2022-11-28 20:02:18.609
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2022-11-28 20:02:18.610
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 org.eclipse.core.resources 4 567 2022-11-28 20:02:18.611
!MESSAGE Could not read metadata for '.settings'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.settings)[567]: java.lang.Exception: The project description file (.project) for '.settings' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2022-11-28 20:02:18.611
!MESSAGE The project description file (.project) for '.settings' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.settings' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jface 2 0 2022-11-28 20:02:22.274
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-28 20:02:22.274
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-28 20:02:22.274
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-28 20:02:25.296
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.equinox.p2.repository 2 0 2022-11-28 20:15:35.733
!MESSAGE Using unsafe http transport to retrieve http://www.genuitec.com/updates/devstyle/ci/, see CVE-2021-41033. Consider using https instead.

!ENTRY org.eclipse.equinox.p2.repository 2 0 2022-11-28 20:15:52.686
!MESSAGE Using unsafe http transport to retrieve http://www.genuitec.com/updates/devstyle/ci/, see CVE-2021-41033. Consider using https instead.

!ENTRY org.eclipse.equinox.p2.transport.ecf 2 0 2022-11-28 20:15:54.985
!MESSAGE Connection to https://mirror.aarnet.edu.au/pub/eclipse/releases/2022-09/202209141001/plugins/org.eclipse.pde_3.13.2000.v20220831-1800.jar failed on This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server (mirror.aarnet.edu.au). Retry attempt 0 started
!STACK 0
java.net.UnknownHostException: This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server (mirror.aarnet.edu.au)
	at java.base/java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.base/java.net.Inet6AddressImpl.lookupAllHostAddr(Inet6AddressImpl.java:52)
	at java.base/java.net.InetAddress$PlatformResolver.lookupByName(InetAddress.java:1059)
	at java.base/java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1668)
	at java.base/java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:1003)
	at java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1658)
	at java.base/java.net.InetAddress.getAllByName(InetAddress.java:1524)
	at org.apache.hc.client5.http.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:43)
	at org.apache.hc.client5.http.impl.io.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:118)
	at org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:396)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:158)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:168)
	at org.apache.hc.client5.http.impl.classic.ConnectExec.execute(ConnectExec.java:136)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement$1.proceed(ExecChainElement.java:57)
	at org.apache.hc.client5.http.impl.classic.ProtocolExec.execute(ProtocolExec.java:175)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement$1.proceed(ExecChainElement.java:57)
	at org.apache.hc.client5.http.impl.classic.HttpRequestRetryExec.execute(HttpRequestRetryExec.java:96)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement$1.proceed(ExecChainElement.java:57)
	at org.apache.hc.client5.http.impl.classic.ContentCompressionExec.execute(ContentCompressionExec.java:133)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement$1.proceed(ExecChainElement.java:57)
	at org.apache.hc.client5.http.impl.classic.RedirectExec.execute(RedirectExec.java:115)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:170)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:75)
	at org.eclipse.ecf.provider.filetransfer.httpclient5.HttpClientRetrieveFileTransfer.performConnect(HttpClientRetrieveFileTransfer.java:1009)
	at org.eclipse.ecf.provider.filetransfer.httpclient5.HttpClientRetrieveFileTransfer.access$0(HttpClientRetrieveFileTransfer.java:1001)
	at org.eclipse.ecf.provider.filetransfer.httpclient5.HttpClientRetrieveFileTransfer$1.performFileTransfer(HttpClientRetrieveFileTransfer.java:997)
	at org.eclipse.ecf.filetransfer.FileTransferJob.run(FileTransferJob.java:76)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-11-28 20:16:29.025 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=19.0.1
java.vendor=BellSoft
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data file:/C:/Users/balaz/Desktop/baka2/.metadata/ -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-28 20:16:42.283
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-28 20:16:42.284
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-28 20:16:42.284
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-28 20:16:56.830
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-11-28 20:34:42.075
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager$6.run(UndoManager.java:338)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4043)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-11-28 20:34:46.333
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager$6.run(UndoManager.java:338)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4043)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-11-28 20:34:46.335
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager.activate(UndoManager.java:90)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState_True(DesignPage.java:275)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState(DesignPage.java:252)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode.showPage(DefaultMultiMode.java:127)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode$1.widgetSelected(DefaultMultiMode.java:63)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:252)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:778)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3248)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1882)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:332)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-11-28 20:34:46.335
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager.activate(UndoManager.java:90)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState_True(DesignPage.java:275)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState(DesignPage.java:252)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode.showPage(DefaultMultiMode.java:127)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode$1.widgetSelected(DefaultMultiMode.java:63)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:252)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:778)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3248)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1882)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:332)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-11-28 20:36:44.722
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:590)
	at org.eclipse.wb.internal.core.model.description.helpers.DescriptionHelper.getIconImage(DescriptionHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getComponentImage(ComponentPresentationHelper.java:166)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getFastPresentation(ComponentPresentationHelper.java:139)
	at org.eclipse.wb.internal.core.model.description.helpers.ComponentPresentationHelper.getPresentation(ComponentPresentationHelper.java:114)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.preparePresentation(ComponentEntryInfo.java:259)
	at org.eclipse.wb.core.editor.palette.model.entry.ComponentEntryInfo.initialize(ComponentEntryInfo.java:219)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.getVisualEntry(DesignerPalette.java:267)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette$4.getEntries(DesignerPalette.java:347)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$CategoryFigure.<init>(PaletteComposite.java:368)
	at org.eclipse.wb.core.controls.palette.PaletteComposite$PaletteFigure.refresh(PaletteComposite.java:284)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.refreshPalette(PaletteComposite.java:199)
	at org.eclipse.wb.core.controls.palette.PaletteComposite.setPalette(PaletteComposite.java:192)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.showPalette(DesignerPalette.java:462)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.reloadPalette(DesignerPalette.java:182)
	at org.eclipse.wb.internal.core.editor.palette.DesignerPalette.setInput(DesignerPalette.java:148)
	at org.eclipse.wb.internal.core.editor.JavaDesignComposite.refresh(JavaDesignComposite.java:147)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:604)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:468)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:464)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:470)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:484)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:432)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:389)
	at org.eclipse.wb.internal.core.editor.UndoManager$6.run(UndoManager.java:338)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4043)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.ui 4 10001 2022-11-30 16:24:22.605
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): CanonicalizationMethod.class [in javax.xml.crypto.dsig [in <module:java.xml.crypto>]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.ClassFile.getBinaryTypeInfo(ClassFile.java:203)
	at org.eclipse.jdt.internal.core.ClassFile.buildStructure(ClassFile.java:92)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.Openable.getBuffer(Openable.java:296)
	at org.eclipse.jdt.internal.core.AbstractClassFile.getBuffer(AbstractClassFile.java:245)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContentFromSource(JavadocContentAccess2.java:639)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:520)
	at org.eclipse.jdt.internal.ui.text.java.ProposalInfo.extractJavadoc(ProposalInfo.java:93)
	at org.eclipse.jdt.internal.ui.text.java.ProposalInfo.computeInfo(ProposalInfo.java:78)
	at org.eclipse.jdt.internal.ui.text.java.ProposalInfo.getInfo(ProposalInfo.java:63)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.getAdditionalProposalInfo(AbstractJavaCompletionProposal.java:583)
	at org.eclipse.jface.text.contentassist.AdditionalInfoController$Timer$2$1.run(AdditionalInfoController.java:116)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2022-11-30 16:24:22.608
!MESSAGE CanonicalizationMethod.class [in javax.xml.crypto.dsig [in <module:java.xml.crypto>]] does not exist

!ENTRY org.eclipse.jdt.core 4 4 2022-11-30 16:41:43.425
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.print.attribute.Size2DSyntax;

import characters.Characters;
import objects.OBJ_Heart;
import objects.OBJ_ManaBEER;
import objects.OBJ_Uniza_Coin;

public class UserInterf {

	GameScreen gs;
	UtilityTool uTool = new UtilityTool();
	Graphics2D g2;
	public Font purisaB;
	BufferedImage keyImage;
	BufferedImage uniza_heartF,ovca, uniza_heartH,uniza_heartB,beer_full ,beer_blank,unyza,monster,stuff11,stuff22,coin;
	public boolean messageOn = false;
	//public String message = "";
	//int messageCounter=0;
	ArrayList<String>message = new ArrayList<>();
	ArrayList<Integer>messageCount = new ArrayList<>();
	public boolean gameFinish=false;
	double playTIME;
	DecimalFormat dFormat = new DecimalFormat("#0.00");
	public String currentDialogue = "";
	public int selectedNum = 0;
	public int titleScreenState=0; // 0 firstScreen,  1 secondScreen
	public int playerSlotCol=0;
	public int playerSlotRow=0;
	public int npcSlotRow=0;
	public int npcSlotCol=0;
	int subState=0;
	int tranCounter =0;
	public Characters npc;
	
	
	public UserInterf(GameScreen gs) {
		this.gs=gs;
		
		
		try {
			InputStream is = getClass().getResourceAsStream("/font/purisa.ttf");
			purisaB = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//hearts
		Characters heart = new OBJ_Heart(gs);
		uniza_heartF = heart.image;
		uniza_heartH = heart.image2;
		uniza_heartB = heart.image3;
		
		Characters beer = new OBJ_ManaBEER(gs);
		beer_full = beer.image;
		beer_blank= beer.image2;
		
		Characters coin1= new OBJ_Uniza_Coin(gs);
		coin=coin1.down1;
	}
	
	public void addMessage(String text) {
		message.add(text);
		messageCount.add(0);
	}
	
	
	public void draw(Graphics2D g2) {
		this.g2=g2;
		
		g2.setColor(Color.white);
		
		//title
		if(gs.gameStates == gs.titleState) {
			drawTittleScreen();
		}
		
		//play
		if(gs.gameStates == gs.huntState) {
			drawLife();
			drawMessage();
		}
		
		//pause
		if(gs.gameStates == gs.pauseState) {
			drawLife();
			drawPause();
		}
		
		//dialogue
		if(gs.gameStates == gs.dialogState) {
			//drawLife();
			drawDialogue();
		}
		
		//character
		if(gs.gameStates == gs.characterState) {
			drawCharScreen();
			drawInventory(gs.player, true);
		}
		
		//options
		if(gs.gameStates == gs.optionState) {
			drawOptionsScreen();
		}
		
		//gameOver
		if(gs.gameStates == gs.gameOverState) {
			gs.stopMusic();
			drawGameOverScreen();
		}
		
		//transition state
		if(gs.gameStates == gs.transitionState) {
			drawTransition();
		}
		
		//transition state
		if(gs.gameStates == gs.tradingState) {
			drawTradingScreen();
		}
	}
	
	public void drawLife() {
		
		int x = gs.sizeRect;
		int y = gs.sizeRect - (gs.sizeRect/2);
		
		int i=0;
		
		//draw max life
		while(i <gs.player.maxLife/2) {
			g2.drawImage(uniza_heartB, x, y, null);
			i++;
			x+= gs.sizeRect;
		}
		
		//reset
		x = gs.sizeRect;
		y = gs.sizeRect - (gs.sizeRect/2);
		
		i=0;
		
		//current life
		while(i<gs.player.life) {
			g2.drawImage(uniza_heartH, x, y, null);
			i++;
			if(i <gs.player.life) {
				g2.drawImage(uniza_heartF, x, y, null);
			}
			i++;
			x += gs.sizeRect;
		}
		
		
		//max beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.maxMana) {
			g2.drawImage(beer_blank, x, y, null);
			i++;
			x+=35;
		}
		
		//beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.mana) {
			g2.drawImage(beer_full, x, y, null);
			i++;
			x+=35;
		}
		
	}
	
	public void drawTransition() {
		tranCounter++;
		g2.setColor(new Color(0,0,0,tranCounter*5));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		if(tranCounter == 50) {
			tranCounter= 0;
			gs.gameStates = gs.huntState;
			gs.currentMap = gs.events.tempMap;
			gs.player.worldX = gs.sizeRect * gs.events.tempCol;
			gs.player.worldY = gs.sizeRect * gs.events.tempRow;
			gs.events.previousEveX = gs.player.worldX;
			gs.events.previousEveY = gs.player.worldY;
		}
	}
	
	public void drawOptionsScreen() {
		g2.setColor(Color.white);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		//sub window
		
		int frameX = gs.sizeRect *6;
		int frameY= gs.sizeRect;
		int frameWidth= gs.sizeRect *8;
		int frameHeight= gs.sizeRect *10;
		
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		switch(subState) {
		case 0: optionsTop(frameX,frameY); break;
		case 1: options_fullScrNotif(frameX, frameY);break;
		case 2: options_control(frameX, frameY); break;
		case 3: options_endGameConf(frameX, frameY); break;
		}
		
		gs.keys.enterPress = false;
	}
	
	public void optionsTop(int frameX, int frameY) {
		int textX;
		int textY;
		
		String text = "OPTIONS";
		
		textX= getXforCenteredText(text);
		textY= frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		
		//full screen
		textX= frameX + gs.sizeRect;
		textY += gs.sizeRect*2;
		g2.drawString("FULL SCREEN" , textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				if(gs.fullscreenOn == false) {
					gs.fullscreenOn = true;
				}else if(gs.fullscreenOn == true) {
					gs.fullscreenOn = false;
				}
				subState = 1;
			}
		}
		
		//music
		textY+=gs.sizeRect;
		g2.drawString("MUSIC", textX, textY);
		if(selectedNum == 1) {
			g2.drawString(">", textX-25, textY);
		}
		
		//se
		textY+=gs.sizeRect;
		g2.drawString("SE", textX, textY);
		if(selectedNum == 2) {
			g2.drawString(">", textX-25, textY);
		}
		
		//control
		textY+=gs.sizeRect;
		g2.drawString("CONTROLS", textX, textY);
		if(selectedNum == 3) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState =2;
				selectedNum=0;
			}
		}
		
		
		//end game
		textY+=gs.sizeRect;
		g2.drawString("END GAME", textX, textY);
		if(selectedNum == 4) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=3;
				selectedNum = 0;
			}
		}
		
		
		//back
		textY+=gs.sizeRect*2;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 5) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				gs.gameStates= gs.huntState;
				selectedNum=0;
			}
		}
		
		//full screen box
		textX= frameX+ gs.sizeRect*6;
		textY= frameY+ gs.sizeRect*2 + 24;
		g2.setStroke(new BasicStroke(3));
		g2.drawRect(textX, textY, 24, 24);
		if(gs.fullscreenOn == true) {
			g2.fillRect(textX, textY, 24, 24);
		}
		
		//music volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24); // 120 /5 = 24 
		
		int volimeWidth = 24*gs.music.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		//se volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24);
		volimeWidth = 24*gs.se.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect-10;
		
		g2.drawImage(ovca,textX , textY,null);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect;
		
		g2.drawImage(ovca,textX , textY,null);
		
		
		gs.config.saveConf();

		
	}
	
	public void options_control(int frameX, int frameY) {
		String text = "CONTROL";
		int textX = getXforCenteredText(text);
		int textY = frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		g2.setFont(g2.getFont().deriveFont(19F));
		
		
		
		textX = frameX + gs.sizeRect;
		textY+= gs.sizeRect;
		
		g2.drawString("MOVE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("ATTACK/CONF", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("SHOOT/CAST", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("INVENTORY", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("PAUSE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("OPTIONS", textX, textY);
		textY+= gs.sizeRect;
		
		//back
		textX = frameX + gs.sizeRect;
		textY = frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum=3;
			}
		}
		
		textX = frameX + gs.sizeRect*5;
		textY = frameY + gs.sizeRect*2;
		g2.setColor(Color.GRAY);
		
		g2.drawString("WASD", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ENTER", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("F", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("C", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("P", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ESCAPE", textX, textY);
		textY+= gs.sizeRect;
		
		
		
	}
	
	public void options_endGameConf(int frameX,int frameY) {
		int textX = frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect*3;
		
		currentDialogue = "QUIT the game and \nreturn to tittle \nscreen without saving!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//yes 
		String text = "YES";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect*3;
		g2.drawString(text, textX, textY);
		if(selectedNum==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				gs.gameStates = gs.titleState;
				titleScreenState = 0;
				gs.stopMusic();
				gs.restart();
			}
		}
		
		//no
		
		text = "NO";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect;
		g2.drawString(text, textX, textY);
		if(selectedNum==1) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum = 4;
			}
		}
	}
	
	public void options_fullScrNotif(int frameX, int frameY) {
		int textX= frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect;
		
		currentDialogue = "The change will take \neffect after \nrestarting the game!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//back
		textY= frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum ==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
			}
		}
	}
	
	public void drawMessage() {
		int messX = gs.sizeRect;
		int messY = gs.sizeRect*6;
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,28F));
		
		for(int i =0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.black);
				g2.drawString(message.get(i),messX,messY);
				
				g2.setColor(new Color(252, 127, 3,200));
				g2.drawString(message.get(i),messX+2,messY+2);
				
				int counter = messageCount.get(i) +1;	// messageCounter++
				messageCount.set(i, counter);			//set the counter to the array
				messY += 50;
				
				if(messageCount.get(i) > 180) {
					message.remove(i);
					messageCount.remove(i);
				}
			}
		}
	}
	
	public void drawCharScreen() {
		
		//window frame
		final int frameX = gs.sizeRect ;
		final int frameY = gs.sizeRect;
		final int frameWidth = gs.sizeRect*5;
		final int frameHeight = gs.sizeRect * 10;
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//text
		g2.setColor(Color.black);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		int textX = frameX + 20;
		int textY = frameY+gs.sizeRect;
		final int lineHeight = 35;
		
		//names
		g2.drawString("Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Life", textX, textY);
		textY += lineHeight;
		g2.drawString("Mana", textX, textY);
		textY += lineHeight;
		g2.drawString("Strength", textX, textY);
		textY += lineHeight;
		g2.drawString("Dexterity", textX, textY);
		textY += lineHeight;
		g2.drawString("Attack", textX, textY);
		textY += lineHeight;
		g2.drawString("Defense", textX, textY);
		textY += lineHeight;
		g2.drawString("Exp", textX, textY);
		textY += lineHeight;
		g2.drawString("Next Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Coin", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Weapon", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Shield", textX, textY);
		textY += lineHeight;
		
		
		//values 
		int tailX = (frameX + frameWidth)- 30;
		//reset
		textY = frameY + gs.sizeRect;
		String value;
		
		
		value= String.valueOf(gs.player.level);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.life +"/"+ gs.player.maxLife);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.mana +"/"+ gs.player.maxMana);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.strength);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.dexterity);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.attack);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		
		value= String.valueOf(gs.player.defense);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.exp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.nextLevelExp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.coin);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += 15;
		
		g2.drawImage(gs.player.currentWeapon.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		g2.drawImage(gs.player.currentShield.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		
		
	}
	
	public void drawGameOverScreen() {
		
		g2.setColor(new Color(0,0,0,150));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		int x;
		int y;
		String text;
		
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,110f));
		
		text = "GAME OVER!";
		
		g2.setColor(Color.black);
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x+5, y+5);
		
		//retry
		g2.setFont(g2.getFont().deriveFont(50f));
		g2.setColor(Color.black);
		text="Retry";
		x =getXforCenteredText(text);
		y +=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 0) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
		//quit
		g2.setColor(Color.black);
		text="QUIT";
		x =getXforCenteredText(text);
		y += 55;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 1) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
	}
	
	public void drawTradingScreen() {
		
		switch(subState) {
		case 0: trade_select();break;
		case 1: trade_buy();break;
		case 2: trade_sell();break;
		}
		gs.keys.enterPress = false;
	}
	
	public void trade_select() {
		int x,y,width,height;
		drawDialogue();
		g2.setFont(g2.getFont().deriveFont(50f));
		String uniza = "SPONZORYNG FEYT UNYZA!";
		x= gs.sizeRect;
		y=gs.sizeRect*2;
		g2.drawString(uniza, x, y);
		
		g2.setColor(new Color(252, 127, 3));
		g2.drawString(uniza, x+4, y+4);
		
		//draw window
		x= gs.sizeRect *14;
		y= gs.sizeRect *3;
		
		width= gs.sizeRect*3;
		height= (int)(gs.sizeRect * 3.5);
		
		drawSubWind(x, y, width, height);
		
		//draw texts
		g2.setFont(g2.getFont().deriveFont(26f));
		
		x += gs.sizeRect;
		y += gs.sizeRect;
		g2.drawString("Buy", x, y);
		if(selectedNum == 0) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 1;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Sell", x, y);
		if(selectedNum == 1) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 2;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Leave", x, y);
		if(selectedNum == 2) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				selectedNum = 0;
				gs.gameStates = gs.dialogState;
				currentDialogue = "Come again, hehe!";
			}
		}
		
	}
	
	public void trade_buy() {
		
		//draw player inventory
		drawInventory(gs.player, false);
		//draw npc inventory
		drawInventory(npc, true);
		
		//draw hint window
		int x = gs.sizeRect*2;
		int y = gs.sizeRect*9+15;
		int width = gs.sizeRect*6;
		int height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(npcSlotCol, npcSlotRow);
		if(itemIndex < npc.inventory.size()) {
			x=(int)(gs.sizeRect*5.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = npc.inventory.get(itemIndex).price;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*8-20);
			g2.drawString(text, x, y+30);
			
			
			
			//BUYING ITEMS
			if(gs.keys.enterPress == true) {
				if(npc.inventory.get(itemIndex).price > gs.player.coin) {
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Nemáš love , čo by si \nchcel?";
					drawDialogue();
				}else {
					if(gs.player.canObtainItem(npc.inventory.get(itemIndex)) == true) {
						gs.player.coin -= npc.inventory.get(itemIndex).price;
					}else {
						subState=0;
						gs.gameStates = gs.dialogState;
						currentDialogue = "Maš plne vrecka čo ty \nchceš!";
					}
				}
			}
		}
	}
	
	public void trade_sell() {
		//draw player invetory
		
		drawInventory(gs.player, true);
		int x;
		int y;
		int width;
		int height;
		
		//draw hint window
		x = gs.sizeRect*2;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(playerSlotCol, playerSlotRow);
		if(itemIndex < gs.player.inventory.size()) {
			x=(int)(gs.sizeRect*14.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = gs.player.inventory.get(itemIndex).price/2;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*17-20);
			g2.drawString(text, x, y+30);
			
			
			
			//selling ITEMS
			if(gs.keys.enterPress == true) {
				if(gs.player.inventory.get(itemIndex) == gs.player.currentWeapon || 
						gs.player.inventory.get(itemIndex) == gs.player.currentShield) {
					selectedNum=0;
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue= "You cannot sell an \nequipped item!";
				}else {
					if(subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Maš plne vrecka čo ty \nchceš!";.amount > 1 ) {
						
					}
					gs.player.inventory.remove(itemIndex);
					gs.player.coin += price;
				}
					
			}
		}
	}
	
	public void drawInventory(Characters character, boolean cursor) {
		
		int frameX=0;
		int frameY=0;
		int frameWidth=0;
		int frameHeight=0;
		int slotCol=0;
		int slotRow=0;
		
		if(character == gs.player) {
			frameX = gs.sizeRect *11;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= playerSlotCol;
			slotRow= playerSlotRow;
		}else {
			frameX = gs.sizeRect *2;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= npcSlotCol;
			slotRow= npcSlotRow;
		}
		g2.setFont(purisaB);
		//window frame
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//SLot
		final int slotXstart= frameX + 20;
		final int slotYstart= frameY + 20;
		int slotX = slotXstart;
		int slotY = slotYstart;
		int slotSize= gs.sizeRect+3;
		
		//draw player items
		for(int i = 0; i < character.inventory.size(); i++) {
			//EQUIP cursor
			if(character.inventory.get(i)== character.currentWeapon || 
					character.inventory.get(i)== character.currentShield) {
				g2.setColor(new Color(179,98,0));
				g2.fillRoundRect(slotX, slotY, gs.sizeRect, gs.sizeRect,10,10);
			}
			
			g2.drawImage(character.inventory.get(i).down1, slotX, slotY, null );
			
			//display amount
			if(character.inventory.get(i).amount > 1) {
				g2.setFont(g2.getFont().deriveFont(32f));
				int amountX;
				int amountY;
				String s = ""+ character.inventory.get(i).amount;
				amountX=getXforAlignToRightText(s, slotX + 44);
				amountY= slotY + gs.sizeRect;
				
				//draw shadow number
				g2.setColor(new Color(60,60,60));
				g2.drawString(s, amountX, amountY);
				
				//number
				g2.setColor(Color.white);
				g2.drawString(s, amountX-3, amountY-3);
			}
			slotX += slotSize;
			
			if(i == 4 || i == 9 || i == 14){
				slotX = slotXstart;
				slotY += slotSize;
			}
		}
		
		// cursor
		if(cursor == true) {
			int cursorX = slotXstart + (slotSize * slotCol);
			int cursorY = slotYstart + (slotSize * slotRow);
			int cursorWidth = gs.sizeRect;
			int cursorHeight = gs.sizeRect;
			
			//draw cursor
			g2.setColor(new Color(169,169,169));
			//g2.fillRect(cursorX, cursorY, cursorWidth, cursorHeight);
			g2.setColor(Color.black);
			g2.setStroke(new BasicStroke(3));
			g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight,10 ,10);
			
			
			//DESCRIPTION FREAM
			int dFrameX=frameX;
			int dFrameY= frameY+frameHeight+10;
			int dFrameWidth= frameWidth;
			int dFrameHeight= gs.sizeRect*3;
			
			
			//text
			int textX = dFrameX+20;
			int textY= dFrameY+ gs.sizeRect;
			g2.setFont(g2.getFont().deriveFont(20F));
			
			int itemIndex = getItemIndexOnSlot(slotCol,slotRow);
			if(itemIndex < character.inventory.size()) {
				
				drawSubWind(dFrameX, dFrameY, dFrameWidth, dFrameHeight);
				
				for(String line : character.inventory.get(itemIndex).description.split("\n")) {
					g2.drawString(line, textX, textY);
					textY += 32;
				}
				
			}
		}
	}
	
	public int getItemIndexOnSlot(int slotCol, int slotRow) {
		int itemIndex = slotCol + (slotRow*5);
		return itemIndex;
	}
	
	public void drawTittleScreen() {
		if(titleScreenState == 0) {
			//background
			UtilityTool uTool = new UtilityTool();
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//tittle name
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,70));
			String text = "UNYZA ADVENTÜRE";
			int x = getXforCenteredText(text);
			int y = gs.sizeRect*3;
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+5, y+5);
			
			//ovca
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/ovca.png"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth-30, gs.screenHeight-30);
				//g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			x = (gs.sizeRect*8)- (gs.sizeRect/3) ;
			y = gs.sizeRect*2;
			g2.drawImage(unyza, x, y,gs.sizeRect-10, gs.sizeRect-10,null);
			
			
			
			//text gandalf
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			x=gs.screenWidth/2 + (gs.sizeRect*2);
			y += gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString("Skúl Gandalf", x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			
			g2.drawString("Skúl Gandalf", x+4, y+4);
			
			
			
			//gandalf
			x=gs.screenWidth/2 + (gs.sizeRect*3);
			y += gs.sizeRect;
			
			try {
				BufferedImage monster2 = ImageIO.read(getClass().getResourceAsStream("/img/oldman_down_1.png"));
				monster= uTool.scaleImage(monster2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(monster, x, y,gs.sizeRect*3, gs.sizeRect*3,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//monster
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,42));
			
			
			
			text = "New Game";
			x = gs.sizeRect*2;
			y = gs.sizeRect *7;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Load Game";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Options";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 2) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Quit";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 3) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
		}
		else if(titleScreenState == 1) {
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			String text = "";
			int x;
			int y=0;
			
			text="Play";
			x = gs.sizeRect;
			y += gs.sizeRect*10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
			}
			text="Back";
			x = gs.sizeRect;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
				
			}
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			text = "NAME : " + gs.id;
			x = gs.sizeRect;
			y = gs.sizeRect*2;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			text = "Your Default Stuff: ";
			x = gs.sizeRect - (gs.sizeRect/2);
			y = gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			x=gs.screenWidth - (gs.sizeRect*6);
			y=gs.sizeRect;
			
			try {
				BufferedImage stuff1 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff.png"));
				stuff11= uTool.scaleImage(stuff1, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff11, x, y,gs.sizeRect*5, gs.sizeRect*10,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			x=gs.screenWidth - (gs.sizeRect*12);
			y=gs.sizeRect*5;
			
			try {
				BufferedImage stuff2 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff2.png"));
				stuff22= uTool.scaleImage(stuff2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff22, x, y,gs.sizeRect*5, gs.sizeRect*6,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
	}
	
	public void drawDialogue() {
		//window
		g2.setFont(purisaB);
		int x=gs.sizeRect*3;
		int y=gs.sizeRect*7;
		int width=gs.screenWidth - (gs.sizeRect*6);
		int height= gs.sizeRect*4;
		
		drawSubWind(x, y, width, height);
		
		x += gs.sizeRect;
		y += gs.sizeRect+5;
		
		for(String line : currentDialogue.split("\n")) {
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,38));
			  g2.drawString(line, x, y); y +=52; 
			  }
		/*
		g2.setColor(new Color(0,0,0));
		String enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7, gs.sizeRect*5); 
		
		g2.setColor(new Color(252, 127, 3));
		enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7+3, gs.sizeRect*5+3);
		*/
	}
	
	public void drawSubWind(int x, int y , int width, int height) {
		Color c= new Color(252, 127, 3,200);
		g2.setColor(c);
		g2.fillRoundRect(x, y, width, height, 35, 35);
		
		c= new Color(0,0,0);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(5));
		g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);
		
	}
	
	public void drawPause() {
		g2.setFont(purisaB);
		//g2.setColor(Color.white);
		g2.setColor(Color.black);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,50));
		String text="PAUSED";
		int x= getXforCenteredText(text);
				
		
		int y= gs.screenHeight/2;
		
		g2.drawString(text, x, y);

		g2.setColor(new Color(252, 127, 3));
		x= getXforCenteredText(text);		
		y= gs.screenHeight/2;
		
		g2.drawString(text, x+3, y+3);
	}
	
	public int getXforCenteredText(String text) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=gs.screenWidth/2 - length/2;
		return x;
	}
	
	public int getXforAlignToRightText(String text,int tailX) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=tailX - length;
		return x;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-11-30 16:41:43.428
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-11-30 16:41:43.428
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-30 16:41:43.543
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.print.attribute.Size2DSyntax;

import characters.Characters;
import objects.OBJ_Heart;
import objects.OBJ_ManaBEER;
import objects.OBJ_Uniza_Coin;

public class UserInterf {

	GameScreen gs;
	UtilityTool uTool = new UtilityTool();
	Graphics2D g2;
	public Font purisaB;
	BufferedImage keyImage;
	BufferedImage uniza_heartF,ovca, uniza_heartH,uniza_heartB,beer_full ,beer_blank,unyza,monster,stuff11,stuff22,coin;
	public boolean messageOn = false;
	//public String message = "";
	//int messageCounter=0;
	ArrayList<String>message = new ArrayList<>();
	ArrayList<Integer>messageCount = new ArrayList<>();
	public boolean gameFinish=false;
	double playTIME;
	DecimalFormat dFormat = new DecimalFormat("#0.00");
	public String currentDialogue = "";
	public int selectedNum = 0;
	public int titleScreenState=0; // 0 firstScreen,  1 secondScreen
	public int playerSlotCol=0;
	public int playerSlotRow=0;
	public int npcSlotRow=0;
	public int npcSlotCol=0;
	int subState=0;
	int tranCounter =0;
	public Characters npc;
	
	
	public UserInterf(GameScreen gs) {
		this.gs=gs;
		
		
		try {
			InputStream is = getClass().getResourceAsStream("/font/purisa.ttf");
			purisaB = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//hearts
		Characters heart = new OBJ_Heart(gs);
		uniza_heartF = heart.image;
		uniza_heartH = heart.image2;
		uniza_heartB = heart.image3;
		
		Characters beer = new OBJ_ManaBEER(gs);
		beer_full = beer.image;
		beer_blank= beer.image2;
		
		Characters coin1= new OBJ_Uniza_Coin(gs);
		coin=coin1.down1;
	}
	
	public void addMessage(String text) {
		message.add(text);
		messageCount.add(0);
	}
	
	
	public void draw(Graphics2D g2) {
		this.g2=g2;
		
		g2.setColor(Color.white);
		
		//title
		if(gs.gameStates == gs.titleState) {
			drawTittleScreen();
		}
		
		//play
		if(gs.gameStates == gs.huntState) {
			drawLife();
			drawMessage();
		}
		
		//pause
		if(gs.gameStates == gs.pauseState) {
			drawLife();
			drawPause();
		}
		
		//dialogue
		if(gs.gameStates == gs.dialogState) {
			//drawLife();
			drawDialogue();
		}
		
		//character
		if(gs.gameStates == gs.characterState) {
			drawCharScreen();
			drawInventory(gs.player, true);
		}
		
		//options
		if(gs.gameStates == gs.optionState) {
			drawOptionsScreen();
		}
		
		//gameOver
		if(gs.gameStates == gs.gameOverState) {
			gs.stopMusic();
			drawGameOverScreen();
		}
		
		//transition state
		if(gs.gameStates == gs.transitionState) {
			drawTransition();
		}
		
		//transition state
		if(gs.gameStates == gs.tradingState) {
			drawTradingScreen();
		}
	}
	
	public void drawLife() {
		
		int x = gs.sizeRect;
		int y = gs.sizeRect - (gs.sizeRect/2);
		
		int i=0;
		
		//draw max life
		while(i <gs.player.maxLife/2) {
			g2.drawImage(uniza_heartB, x, y, null);
			i++;
			x+= gs.sizeRect;
		}
		
		//reset
		x = gs.sizeRect;
		y = gs.sizeRect - (gs.sizeRect/2);
		
		i=0;
		
		//current life
		while(i<gs.player.life) {
			g2.drawImage(uniza_heartH, x, y, null);
			i++;
			if(i <gs.player.life) {
				g2.drawImage(uniza_heartF, x, y, null);
			}
			i++;
			x += gs.sizeRect;
		}
		
		
		//max beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.maxMana) {
			g2.drawImage(beer_blank, x, y, null);
			i++;
			x+=35;
		}
		
		//beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.mana) {
			g2.drawImage(beer_full, x, y, null);
			i++;
			x+=35;
		}
		
	}
	
	public void drawTransition() {
		tranCounter++;
		g2.setColor(new Color(0,0,0,tranCounter*5));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		if(tranCounter == 50) {
			tranCounter= 0;
			gs.gameStates = gs.huntState;
			gs.currentMap = gs.events.tempMap;
			gs.player.worldX = gs.sizeRect * gs.events.tempCol;
			gs.player.worldY = gs.sizeRect * gs.events.tempRow;
			gs.events.previousEveX = gs.player.worldX;
			gs.events.previousEveY = gs.player.worldY;
		}
	}
	
	public void drawOptionsScreen() {
		g2.setColor(Color.white);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		//sub window
		
		int frameX = gs.sizeRect *6;
		int frameY= gs.sizeRect;
		int frameWidth= gs.sizeRect *8;
		int frameHeight= gs.sizeRect *10;
		
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		switch(subState) {
		case 0: optionsTop(frameX,frameY); break;
		case 1: options_fullScrNotif(frameX, frameY);break;
		case 2: options_control(frameX, frameY); break;
		case 3: options_endGameConf(frameX, frameY); break;
		}
		
		gs.keys.enterPress = false;
	}
	
	public void optionsTop(int frameX, int frameY) {
		int textX;
		int textY;
		
		String text = "OPTIONS";
		
		textX= getXforCenteredText(text);
		textY= frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		
		//full screen
		textX= frameX + gs.sizeRect;
		textY += gs.sizeRect*2;
		g2.drawString("FULL SCREEN" , textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				if(gs.fullscreenOn == false) {
					gs.fullscreenOn = true;
				}else if(gs.fullscreenOn == true) {
					gs.fullscreenOn = false;
				}
				subState = 1;
			}
		}
		
		//music
		textY+=gs.sizeRect;
		g2.drawString("MUSIC", textX, textY);
		if(selectedNum == 1) {
			g2.drawString(">", textX-25, textY);
		}
		
		//se
		textY+=gs.sizeRect;
		g2.drawString("SE", textX, textY);
		if(selectedNum == 2) {
			g2.drawString(">", textX-25, textY);
		}
		
		//control
		textY+=gs.sizeRect;
		g2.drawString("CONTROLS", textX, textY);
		if(selectedNum == 3) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState =2;
				selectedNum=0;
			}
		}
		
		
		//end game
		textY+=gs.sizeRect;
		g2.drawString("END GAME", textX, textY);
		if(selectedNum == 4) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=3;
				selectedNum = 0;
			}
		}
		
		
		//back
		textY+=gs.sizeRect*2;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 5) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				gs.gameStates= gs.huntState;
				selectedNum=0;
			}
		}
		
		//full screen box
		textX= frameX+ gs.sizeRect*6;
		textY= frameY+ gs.sizeRect*2 + 24;
		g2.setStroke(new BasicStroke(3));
		g2.drawRect(textX, textY, 24, 24);
		if(gs.fullscreenOn == true) {
			g2.fillRect(textX, textY, 24, 24);
		}
		
		//music volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24); // 120 /5 = 24 
		
		int volimeWidth = 24*gs.music.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		//se volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24);
		volimeWidth = 24*gs.se.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect-10;
		
		g2.drawImage(ovca,textX , textY,null);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect;
		
		g2.drawImage(ovca,textX , textY,null);
		
		
		gs.config.saveConf();

		
	}
	
	public void options_control(int frameX, int frameY) {
		String text = "CONTROL";
		int textX = getXforCenteredText(text);
		int textY = frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		g2.setFont(g2.getFont().deriveFont(19F));
		
		
		
		textX = frameX + gs.sizeRect;
		textY+= gs.sizeRect;
		
		g2.drawString("MOVE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("ATTACK/CONF", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("SHOOT/CAST", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("INVENTORY", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("PAUSE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("OPTIONS", textX, textY);
		textY+= gs.sizeRect;
		
		//back
		textX = frameX + gs.sizeRect;
		textY = frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum=3;
			}
		}
		
		textX = frameX + gs.sizeRect*5;
		textY = frameY + gs.sizeRect*2;
		g2.setColor(Color.GRAY);
		
		g2.drawString("WASD", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ENTER", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("F", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("C", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("P", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ESCAPE", textX, textY);
		textY+= gs.sizeRect;
		
		
		
	}
	
	public void options_endGameConf(int frameX,int frameY) {
		int textX = frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect*3;
		
		currentDialogue = "QUIT the game and \nreturn to tittle \nscreen without saving!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//yes 
		String text = "YES";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect*3;
		g2.drawString(text, textX, textY);
		if(selectedNum==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				gs.gameStates = gs.titleState;
				titleScreenState = 0;
				gs.stopMusic();
				gs.restart();
			}
		}
		
		//no
		
		text = "NO";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect;
		g2.drawString(text, textX, textY);
		if(selectedNum==1) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum = 4;
			}
		}
	}
	
	public void options_fullScrNotif(int frameX, int frameY) {
		int textX= frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect;
		
		currentDialogue = "The change will take \neffect after \nrestarting the game!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//back
		textY= frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum ==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
			}
		}
	}
	
	public void drawMessage() {
		int messX = gs.sizeRect;
		int messY = gs.sizeRect*6;
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,28F));
		
		for(int i =0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.black);
				g2.drawString(message.get(i),messX,messY);
				
				g2.setColor(new Color(252, 127, 3,200));
				g2.drawString(message.get(i),messX+2,messY+2);
				
				int counter = messageCount.get(i) +1;	// messageCounter++
				messageCount.set(i, counter);			//set the counter to the array
				messY += 50;
				
				if(messageCount.get(i) > 180) {
					message.remove(i);
					messageCount.remove(i);
				}
			}
		}
	}
	
	public void drawCharScreen() {
		
		//window frame
		final int frameX = gs.sizeRect ;
		final int frameY = gs.sizeRect;
		final int frameWidth = gs.sizeRect*5;
		final int frameHeight = gs.sizeRect * 10;
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//text
		g2.setColor(Color.black);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		int textX = frameX + 20;
		int textY = frameY+gs.sizeRect;
		final int lineHeight = 35;
		
		//names
		g2.drawString("Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Life", textX, textY);
		textY += lineHeight;
		g2.drawString("Mana", textX, textY);
		textY += lineHeight;
		g2.drawString("Strength", textX, textY);
		textY += lineHeight;
		g2.drawString("Dexterity", textX, textY);
		textY += lineHeight;
		g2.drawString("Attack", textX, textY);
		textY += lineHeight;
		g2.drawString("Defense", textX, textY);
		textY += lineHeight;
		g2.drawString("Exp", textX, textY);
		textY += lineHeight;
		g2.drawString("Next Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Coin", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Weapon", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Shield", textX, textY);
		textY += lineHeight;
		
		
		//values 
		int tailX = (frameX + frameWidth)- 30;
		//reset
		textY = frameY + gs.sizeRect;
		String value;
		
		
		value= String.valueOf(gs.player.level);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.life +"/"+ gs.player.maxLife);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.mana +"/"+ gs.player.maxMana);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.strength);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.dexterity);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.attack);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		
		value= String.valueOf(gs.player.defense);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.exp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.nextLevelExp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.coin);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += 15;
		
		g2.drawImage(gs.player.currentWeapon.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		g2.drawImage(gs.player.currentShield.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		
		
	}
	
	public void drawGameOverScreen() {
		
		g2.setColor(new Color(0,0,0,150));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		int x;
		int y;
		String text;
		
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,110f));
		
		text = "GAME OVER!";
		
		g2.setColor(Color.black);
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x+5, y+5);
		
		//retry
		g2.setFont(g2.getFont().deriveFont(50f));
		g2.setColor(Color.black);
		text="Retry";
		x =getXforCenteredText(text);
		y +=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 0) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
		//quit
		g2.setColor(Color.black);
		text="QUIT";
		x =getXforCenteredText(text);
		y += 55;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 1) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
	}
	
	public void drawTradingScreen() {
		
		switch(subState) {
		case 0: trade_select();break;
		case 1: trade_buy();break;
		case 2: trade_sell();break;
		}
		gs.keys.enterPress = false;
	}
	
	public void trade_select() {
		int x,y,width,height;
		drawDialogue();
		g2.setFont(g2.getFont().deriveFont(50f));
		String uniza = "SPONZORYNG FEYT UNYZA!";
		x= gs.sizeRect;
		y=gs.sizeRect*2;
		g2.drawString(uniza, x, y);
		
		g2.setColor(new Color(252, 127, 3));
		g2.drawString(uniza, x+4, y+4);
		
		//draw window
		x= gs.sizeRect *14;
		y= gs.sizeRect *3;
		
		width= gs.sizeRect*3;
		height= (int)(gs.sizeRect * 3.5);
		
		drawSubWind(x, y, width, height);
		
		//draw texts
		g2.setFont(g2.getFont().deriveFont(26f));
		
		x += gs.sizeRect;
		y += gs.sizeRect;
		g2.drawString("Buy", x, y);
		if(selectedNum == 0) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 1;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Sell", x, y);
		if(selectedNum == 1) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 2;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Leave", x, y);
		if(selectedNum == 2) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				selectedNum = 0;
				gs.gameStates = gs.dialogState;
				currentDialogue = "Come again, hehe!";
			}
		}
		
	}
	
	public void trade_buy() {
		
		//draw player inventory
		drawInventory(gs.player, false);
		//draw npc inventory
		drawInventory(npc, true);
		
		//draw hint window
		int x = gs.sizeRect*2;
		int y = gs.sizeRect*9+15;
		int width = gs.sizeRect*6;
		int height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(npcSlotCol, npcSlotRow);
		if(itemIndex < npc.inventory.size()) {
			x=(int)(gs.sizeRect*5.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = npc.inventory.get(itemIndex).price;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*8-20);
			g2.drawString(text, x, y+30);
			
			
			
			//BUYING ITEMS
			if(gs.keys.enterPress == true) {
				if(npc.inventory.get(itemIndex).price > gs.player.coin) {
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Nemáš love , čo by si \nchcel?";
					drawDialogue();
				}else {
					if(gs.player.canObtainItem(npc.inventory.get(itemIndex)) == true) {
						gs.player.coin -= npc.inventory.get(itemIndex).price;
					}else {
						subState=0;
						gs.gameStates = gs.dialogState;
						currentDialogue = "Maš plne vrecka čo ty \nchceš!";
					}
				}
			}
		}
	}
	
	public void trade_sell() {
		//draw player invetory
		
		drawInventory(gs.player, true);
		int x;
		int y;
		int width;
		int height;
		
		//draw hint window
		x = gs.sizeRect*2;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(playerSlotCol, playerSlotRow);
		if(itemIndex < gs.player.inventory.size()) {
			x=(int)(gs.sizeRect*14.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = gs.player.inventory.get(itemIndex).price/2;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*17-20);
			g2.drawString(text, x, y+30);
			
			
			
			//selling ITEMS
			if(gs.keys.enterPress == true) {
				if(gs.player.inventory.get(itemIndex) == gs.player.currentWeapon || 
						gs.player.inventory.get(itemIndex) == gs.player.currentShield) {
					selectedNum=0;
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue= "You cannot sell an \nequipped item!";
				}else {
					if(subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Maš plne vrecka čo ty \nchceš!";.amount > 1 ) {
						
					}
					gs.player.inventory.remove(itemIndex);
					gs.player.coin += price;
				}
					
			}
		}
	}
	
	public void drawInventory(Characters character, boolean cursor) {
		
		int frameX=0;
		int frameY=0;
		int frameWidth=0;
		int frameHeight=0;
		int slotCol=0;
		int slotRow=0;
		
		if(character == gs.player) {
			frameX = gs.sizeRect *11;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= playerSlotCol;
			slotRow= playerSlotRow;
		}else {
			frameX = gs.sizeRect *2;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= npcSlotCol;
			slotRow= npcSlotRow;
		}
		g2.setFont(purisaB);
		//window frame
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//SLot
		final int slotXstart= frameX + 20;
		final int slotYstart= frameY + 20;
		int slotX = slotXstart;
		int slotY = slotYstart;
		int slotSize= gs.sizeRect+3;
		
		//draw player items
		for(int i = 0; i < character.inventory.size(); i++) {
			//EQUIP cursor
			if(character.inventory.get(i)== character.currentWeapon || 
					character.inventory.get(i)== character.currentShield) {
				g2.setColor(new Color(179,98,0));
				g2.fillRoundRect(slotX, slotY, gs.sizeRect, gs.sizeRect,10,10);
			}
			
			g2.drawImage(character.inventory.get(i).down1, slotX, slotY, null );
			
			//display amount
			if(character.inventory.get(i).amount > 1) {
				g2.setFont(g2.getFont().deriveFont(32f));
				int amountX;
				int amountY;
				String s = ""+ character.inventory.get(i).amount;
				amountX=getXforAlignToRightText(s, slotX + 44);
				amountY= slotY + gs.sizeRect;
				
				//draw shadow number
				g2.setColor(new Color(60,60,60));
				g2.drawString(s, amountX, amountY);
				
				//number
				g2.setColor(Color.white);
				g2.drawString(s, amountX-3, amountY-3);
			}
			slotX += slotSize;
			
			if(i == 4 || i == 9 || i == 14){
				slotX = slotXstart;
				slotY += slotSize;
			}
		}
		
		// cursor
		if(cursor == true) {
			int cursorX = slotXstart + (slotSize * slotCol);
			int cursorY = slotYstart + (slotSize * slotRow);
			int cursorWidth = gs.sizeRect;
			int cursorHeight = gs.sizeRect;
			
			//draw cursor
			g2.setColor(new Color(169,169,169));
			//g2.fillRect(cursorX, cursorY, cursorWidth, cursorHeight);
			g2.setColor(Color.black);
			g2.setStroke(new BasicStroke(3));
			g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight,10 ,10);
			
			
			//DESCRIPTION FREAM
			int dFrameX=frameX;
			int dFrameY= frameY+frameHeight+10;
			int dFrameWidth= frameWidth;
			int dFrameHeight= gs.sizeRect*3;
			
			
			//text
			int textX = dFrameX+20;
			int textY= dFrameY+ gs.sizeRect;
			g2.setFont(g2.getFont().deriveFont(20F));
			
			int itemIndex = getItemIndexOnSlot(slotCol,slotRow);
			if(itemIndex < character.inventory.size()) {
				
				drawSubWind(dFrameX, dFrameY, dFrameWidth, dFrameHeight);
				
				for(String line : character.inventory.get(itemIndex).description.split("\n")) {
					g2.drawString(line, textX, textY);
					textY += 32;
				}
				
			}
		}
	}
	
	public int getItemIndexOnSlot(int slotCol, int slotRow) {
		int itemIndex = slotCol + (slotRow*5);
		return itemIndex;
	}
	
	public void drawTittleScreen() {
		if(titleScreenState == 0) {
			//background
			UtilityTool uTool = new UtilityTool();
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//tittle name
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,70));
			String text = "UNYZA ADVENTÜRE";
			int x = getXforCenteredText(text);
			int y = gs.sizeRect*3;
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+5, y+5);
			
			//ovca
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/ovca.png"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth-30, gs.screenHeight-30);
				//g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			x = (gs.sizeRect*8)- (gs.sizeRect/3) ;
			y = gs.sizeRect*2;
			g2.drawImage(unyza, x, y,gs.sizeRect-10, gs.sizeRect-10,null);
			
			
			
			//text gandalf
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			x=gs.screenWidth/2 + (gs.sizeRect*2);
			y += gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString("Skúl Gandalf", x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			
			g2.drawString("Skúl Gandalf", x+4, y+4);
			
			
			
			//gandalf
			x=gs.screenWidth/2 + (gs.sizeRect*3);
			y += gs.sizeRect;
			
			try {
				BufferedImage monster2 = ImageIO.read(getClass().getResourceAsStream("/img/oldman_down_1.png"));
				monster= uTool.scaleImage(monster2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(monster, x, y,gs.sizeRect*3, gs.sizeRect*3,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//monster
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,42));
			
			
			
			text = "New Game";
			x = gs.sizeRect*2;
			y = gs.sizeRect *7;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Load Game";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Options";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 2) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Quit";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 3) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
		}
		else if(titleScreenState == 1) {
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			String text = "";
			int x;
			int y=0;
			
			text="Play";
			x = gs.sizeRect;
			y += gs.sizeRect*10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
			}
			text="Back";
			x = gs.sizeRect;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
				
			}
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			text = "NAME : " + gs.id;
			x = gs.sizeRect;
			y = gs.sizeRect*2;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			text = "Your Default Stuff: ";
			x = gs.sizeRect - (gs.sizeRect/2);
			y = gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			x=gs.screenWidth - (gs.sizeRect*6);
			y=gs.sizeRect;
			
			try {
				BufferedImage stuff1 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff.png"));
				stuff11= uTool.scaleImage(stuff1, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff11, x, y,gs.sizeRect*5, gs.sizeRect*10,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			x=gs.screenWidth - (gs.sizeRect*12);
			y=gs.sizeRect*5;
			
			try {
				BufferedImage stuff2 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff2.png"));
				stuff22= uTool.scaleImage(stuff2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff22, x, y,gs.sizeRect*5, gs.sizeRect*6,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
	}
	
	public void drawDialogue() {
		//window
		g2.setFont(purisaB);
		int x=gs.sizeRect*3;
		int y=gs.sizeRect*7;
		int width=gs.screenWidth - (gs.sizeRect*6);
		int height= gs.sizeRect*4;
		
		drawSubWind(x, y, width, height);
		
		x += gs.sizeRect;
		y += gs.sizeRect+5;
		
		for(String line : currentDialogue.split("\n")) {
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,38));
			  g2.drawString(line, x, y); y +=52; 
			  }
		/*
		g2.setColor(new Color(0,0,0));
		String enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7, gs.sizeRect*5); 
		
		g2.setColor(new Color(252, 127, 3));
		enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7+3, gs.sizeRect*5+3);
		*/
	}
	
	public void drawSubWind(int x, int y , int width, int height) {
		Color c= new Color(252, 127, 3,200);
		g2.setColor(c);
		g2.fillRoundRect(x, y, width, height, 35, 35);
		
		c= new Color(0,0,0);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(5));
		g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);
		
	}
	
	public void drawPause() {
		g2.setFont(purisaB);
		//g2.setColor(Color.white);
		g2.setColor(Color.black);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,50));
		String text="PAUSED";
		int x= getXforCenteredText(text);
				
		
		int y= gs.screenHeight/2;
		
		g2.drawString(text, x, y);

		g2.setColor(new Color(252, 127, 3));
		x= getXforCenteredText(text);		
		y= gs.screenHeight/2;
		
		g2.drawString(text, x+3, y+3);
	}
	
	public int getXforCenteredText(String text) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=gs.screenWidth/2 - length/2;
		return x;
	}
	
	public int getXforAlignToRightText(String text,int tailX) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=tailX - length;
		return x;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-30 16:41:43.544
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-30 16:41:43.545
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-30 16:41:43.569
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.print.attribute.Size2DSyntax;

import characters.Characters;
import objects.OBJ_Heart;
import objects.OBJ_ManaBEER;
import objects.OBJ_Uniza_Coin;

public class UserInterf {

	GameScreen gs;
	UtilityTool uTool = new UtilityTool();
	Graphics2D g2;
	public Font purisaB;
	BufferedImage keyImage;
	BufferedImage uniza_heartF,ovca, uniza_heartH,uniza_heartB,beer_full ,beer_blank,unyza,monster,stuff11,stuff22,coin;
	public boolean messageOn = false;
	//public String message = "";
	//int messageCounter=0;
	ArrayList<String>message = new ArrayList<>();
	ArrayList<Integer>messageCount = new ArrayList<>();
	public boolean gameFinish=false;
	double playTIME;
	DecimalFormat dFormat = new DecimalFormat("#0.00");
	public String currentDialogue = "";
	public int selectedNum = 0;
	public int titleScreenState=0; // 0 firstScreen,  1 secondScreen
	public int playerSlotCol=0;
	public int playerSlotRow=0;
	public int npcSlotRow=0;
	public int npcSlotCol=0;
	int subState=0;
	int tranCounter =0;
	public Characters npc;
	
	
	public UserInterf(GameScreen gs) {
		this.gs=gs;
		
		
		try {
			InputStream is = getClass().getResourceAsStream("/font/purisa.ttf");
			purisaB = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//hearts
		Characters heart = new OBJ_Heart(gs);
		uniza_heartF = heart.image;
		uniza_heartH = heart.image2;
		uniza_heartB = heart.image3;
		
		Characters beer = new OBJ_ManaBEER(gs);
		beer_full = beer.image;
		beer_blank= beer.image2;
		
		Characters coin1= new OBJ_Uniza_Coin(gs);
		coin=coin1.down1;
	}
	
	public void addMessage(String text) {
		message.add(text);
		messageCount.add(0);
	}
	
	
	public void draw(Graphics2D g2) {
		this.g2=g2;
		
		g2.setColor(Color.white);
		
		//title
		if(gs.gameStates == gs.titleState) {
			drawTittleScreen();
		}
		
		//play
		if(gs.gameStates == gs.huntState) {
			drawLife();
			drawMessage();
		}
		
		//pause
		if(gs.gameStates == gs.pauseState) {
			drawLife();
			drawPause();
		}
		
		//dialogue
		if(gs.gameStates == gs.dialogState) {
			//drawLife();
			drawDialogue();
		}
		
		//character
		if(gs.gameStates == gs.characterState) {
			drawCharScreen();
			drawInventory(gs.player, true);
		}
		
		//options
		if(gs.gameStates == gs.optionState) {
			drawOptionsScreen();
		}
		
		//gameOver
		if(gs.gameStates == gs.gameOverState) {
			gs.stopMusic();
			drawGameOverScreen();
		}
		
		//transition state
		if(gs.gameStates == gs.transitionState) {
			drawTransition();
		}
		
		//transition state
		if(gs.gameStates == gs.tradingState) {
			drawTradingScreen();
		}
	}
	
	public void drawLife() {
		
		int x = gs.sizeRect;
		int y = gs.sizeRect - (gs.sizeRect/2);
		
		int i=0;
		
		//draw max life
		while(i <gs.player.maxLife/2) {
			g2.drawImage(uniza_heartB, x, y, null);
			i++;
			x+= gs.sizeRect;
		}
		
		//reset
		x = gs.sizeRect;
		y = gs.sizeRect - (gs.sizeRect/2);
		
		i=0;
		
		//current life
		while(i<gs.player.life) {
			g2.drawImage(uniza_heartH, x, y, null);
			i++;
			if(i <gs.player.life) {
				g2.drawImage(uniza_heartF, x, y, null);
			}
			i++;
			x += gs.sizeRect;
		}
		
		
		//max beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.maxMana) {
			g2.drawImage(beer_blank, x, y, null);
			i++;
			x+=35;
		}
		
		//beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.mana) {
			g2.drawImage(beer_full, x, y, null);
			i++;
			x+=35;
		}
		
	}
	
	public void drawTransition() {
		tranCounter++;
		g2.setColor(new Color(0,0,0,tranCounter*5));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		if(tranCounter == 50) {
			tranCounter= 0;
			gs.gameStates = gs.huntState;
			gs.currentMap = gs.events.tempMap;
			gs.player.worldX = gs.sizeRect * gs.events.tempCol;
			gs.player.worldY = gs.sizeRect * gs.events.tempRow;
			gs.events.previousEveX = gs.player.worldX;
			gs.events.previousEveY = gs.player.worldY;
		}
	}
	
	public void drawOptionsScreen() {
		g2.setColor(Color.white);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		//sub window
		
		int frameX = gs.sizeRect *6;
		int frameY= gs.sizeRect;
		int frameWidth= gs.sizeRect *8;
		int frameHeight= gs.sizeRect *10;
		
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		switch(subState) {
		case 0: optionsTop(frameX,frameY); break;
		case 1: options_fullScrNotif(frameX, frameY);break;
		case 2: options_control(frameX, frameY); break;
		case 3: options_endGameConf(frameX, frameY); break;
		}
		
		gs.keys.enterPress = false;
	}
	
	public void optionsTop(int frameX, int frameY) {
		int textX;
		int textY;
		
		String text = "OPTIONS";
		
		textX= getXforCenteredText(text);
		textY= frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		
		//full screen
		textX= frameX + gs.sizeRect;
		textY += gs.sizeRect*2;
		g2.drawString("FULL SCREEN" , textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				if(gs.fullscreenOn == false) {
					gs.fullscreenOn = true;
				}else if(gs.fullscreenOn == true) {
					gs.fullscreenOn = false;
				}
				subState = 1;
			}
		}
		
		//music
		textY+=gs.sizeRect;
		g2.drawString("MUSIC", textX, textY);
		if(selectedNum == 1) {
			g2.drawString(">", textX-25, textY);
		}
		
		//se
		textY+=gs.sizeRect;
		g2.drawString("SE", textX, textY);
		if(selectedNum == 2) {
			g2.drawString(">", textX-25, textY);
		}
		
		//control
		textY+=gs.sizeRect;
		g2.drawString("CONTROLS", textX, textY);
		if(selectedNum == 3) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState =2;
				selectedNum=0;
			}
		}
		
		
		//end game
		textY+=gs.sizeRect;
		g2.drawString("END GAME", textX, textY);
		if(selectedNum == 4) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=3;
				selectedNum = 0;
			}
		}
		
		
		//back
		textY+=gs.sizeRect*2;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 5) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				gs.gameStates= gs.huntState;
				selectedNum=0;
			}
		}
		
		//full screen box
		textX= frameX+ gs.sizeRect*6;
		textY= frameY+ gs.sizeRect*2 + 24;
		g2.setStroke(new BasicStroke(3));
		g2.drawRect(textX, textY, 24, 24);
		if(gs.fullscreenOn == true) {
			g2.fillRect(textX, textY, 24, 24);
		}
		
		//music volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24); // 120 /5 = 24 
		
		int volimeWidth = 24*gs.music.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		//se volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24);
		volimeWidth = 24*gs.se.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect-10;
		
		g2.drawImage(ovca,textX , textY,null);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect;
		
		g2.drawImage(ovca,textX , textY,null);
		
		
		gs.config.saveConf();

		
	}
	
	public void options_control(int frameX, int frameY) {
		String text = "CONTROL";
		int textX = getXforCenteredText(text);
		int textY = frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		g2.setFont(g2.getFont().deriveFont(19F));
		
		
		
		textX = frameX + gs.sizeRect;
		textY+= gs.sizeRect;
		
		g2.drawString("MOVE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("ATTACK/CONF", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("SHOOT/CAST", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("INVENTORY", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("PAUSE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("OPTIONS", textX, textY);
		textY+= gs.sizeRect;
		
		//back
		textX = frameX + gs.sizeRect;
		textY = frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum=3;
			}
		}
		
		textX = frameX + gs.sizeRect*5;
		textY = frameY + gs.sizeRect*2;
		g2.setColor(Color.GRAY);
		
		g2.drawString("WASD", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ENTER", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("F", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("C", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("P", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ESCAPE", textX, textY);
		textY+= gs.sizeRect;
		
		
		
	}
	
	public void options_endGameConf(int frameX,int frameY) {
		int textX = frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect*3;
		
		currentDialogue = "QUIT the game and \nreturn to tittle \nscreen without saving!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//yes 
		String text = "YES";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect*3;
		g2.drawString(text, textX, textY);
		if(selectedNum==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				gs.gameStates = gs.titleState;
				titleScreenState = 0;
				gs.stopMusic();
				gs.restart();
			}
		}
		
		//no
		
		text = "NO";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect;
		g2.drawString(text, textX, textY);
		if(selectedNum==1) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum = 4;
			}
		}
	}
	
	public void options_fullScrNotif(int frameX, int frameY) {
		int textX= frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect;
		
		currentDialogue = "The change will take \neffect after \nrestarting the game!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//back
		textY= frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum ==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
			}
		}
	}
	
	public void drawMessage() {
		int messX = gs.sizeRect;
		int messY = gs.sizeRect*6;
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,28F));
		
		for(int i =0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.black);
				g2.drawString(message.get(i),messX,messY);
				
				g2.setColor(new Color(252, 127, 3,200));
				g2.drawString(message.get(i),messX+2,messY+2);
				
				int counter = messageCount.get(i) +1;	// messageCounter++
				messageCount.set(i, counter);			//set the counter to the array
				messY += 50;
				
				if(messageCount.get(i) > 180) {
					message.remove(i);
					messageCount.remove(i);
				}
			}
		}
	}
	
	public void drawCharScreen() {
		
		//window frame
		final int frameX = gs.sizeRect ;
		final int frameY = gs.sizeRect;
		final int frameWidth = gs.sizeRect*5;
		final int frameHeight = gs.sizeRect * 10;
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//text
		g2.setColor(Color.black);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		int textX = frameX + 20;
		int textY = frameY+gs.sizeRect;
		final int lineHeight = 35;
		
		//names
		g2.drawString("Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Life", textX, textY);
		textY += lineHeight;
		g2.drawString("Mana", textX, textY);
		textY += lineHeight;
		g2.drawString("Strength", textX, textY);
		textY += lineHeight;
		g2.drawString("Dexterity", textX, textY);
		textY += lineHeight;
		g2.drawString("Attack", textX, textY);
		textY += lineHeight;
		g2.drawString("Defense", textX, textY);
		textY += lineHeight;
		g2.drawString("Exp", textX, textY);
		textY += lineHeight;
		g2.drawString("Next Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Coin", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Weapon", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Shield", textX, textY);
		textY += lineHeight;
		
		
		//values 
		int tailX = (frameX + frameWidth)- 30;
		//reset
		textY = frameY + gs.sizeRect;
		String value;
		
		
		value= String.valueOf(gs.player.level);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.life +"/"+ gs.player.maxLife);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.mana +"/"+ gs.player.maxMana);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.strength);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.dexterity);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.attack);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		
		value= String.valueOf(gs.player.defense);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.exp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.nextLevelExp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.coin);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += 15;
		
		g2.drawImage(gs.player.currentWeapon.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		g2.drawImage(gs.player.currentShield.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		
		
	}
	
	public void drawGameOverScreen() {
		
		g2.setColor(new Color(0,0,0,150));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		int x;
		int y;
		String text;
		
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,110f));
		
		text = "GAME OVER!";
		
		g2.setColor(Color.black);
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x+5, y+5);
		
		//retry
		g2.setFont(g2.getFont().deriveFont(50f));
		g2.setColor(Color.black);
		text="Retry";
		x =getXforCenteredText(text);
		y +=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 0) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
		//quit
		g2.setColor(Color.black);
		text="QUIT";
		x =getXforCenteredText(text);
		y += 55;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 1) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
	}
	
	public void drawTradingScreen() {
		
		switch(subState) {
		case 0: trade_select();break;
		case 1: trade_buy();break;
		case 2: trade_sell();break;
		}
		gs.keys.enterPress = false;
	}
	
	public void trade_select() {
		int x,y,width,height;
		drawDialogue();
		g2.setFont(g2.getFont().deriveFont(50f));
		String uniza = "SPONZORYNG FEYT UNYZA!";
		x= gs.sizeRect;
		y=gs.sizeRect*2;
		g2.drawString(uniza, x, y);
		
		g2.setColor(new Color(252, 127, 3));
		g2.drawString(uniza, x+4, y+4);
		
		//draw window
		x= gs.sizeRect *14;
		y= gs.sizeRect *3;
		
		width= gs.sizeRect*3;
		height= (int)(gs.sizeRect * 3.5);
		
		drawSubWind(x, y, width, height);
		
		//draw texts
		g2.setFont(g2.getFont().deriveFont(26f));
		
		x += gs.sizeRect;
		y += gs.sizeRect;
		g2.drawString("Buy", x, y);
		if(selectedNum == 0) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 1;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Sell", x, y);
		if(selectedNum == 1) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 2;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Leave", x, y);
		if(selectedNum == 2) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				selectedNum = 0;
				gs.gameStates = gs.dialogState;
				currentDialogue = "Come again, hehe!";
			}
		}
		
	}
	
	public void trade_buy() {
		
		//draw player inventory
		drawInventory(gs.player, false);
		//draw npc inventory
		drawInventory(npc, true);
		
		//draw hint window
		int x = gs.sizeRect*2;
		int y = gs.sizeRect*9+15;
		int width = gs.sizeRect*6;
		int height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(npcSlotCol, npcSlotRow);
		if(itemIndex < npc.inventory.size()) {
			x=(int)(gs.sizeRect*5.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = npc.inventory.get(itemIndex).price;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*8-20);
			g2.drawString(text, x, y+30);
			
			
			
			//BUYING ITEMS
			if(gs.keys.enterPress == true) {
				if(npc.inventory.get(itemIndex).price > gs.player.coin) {
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Nemáš love , čo by si \nchcel?";
					drawDialogue();
				}else {
					if(gs.player.canObtainItem(npc.inventory.get(itemIndex)) == true) {
						gs.player.coin -= npc.inventory.get(itemIndex).price;
					}else {
						subState=0;
						gs.gameStates = gs.dialogState;
						currentDialogue = "Maš plne vrecka čo ty \nchceš!";
					}
				}
			}
		}
	}
	
	public void trade_sell() {
		//draw player invetory
		
		drawInventory(gs.player, true);
		int x;
		int y;
		int width;
		int height;
		
		//draw hint window
		x = gs.sizeRect*2;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(playerSlotCol, playerSlotRow);
		if(itemIndex < gs.player.inventory.size()) {
			x=(int)(gs.sizeRect*14.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = gs.player.inventory.get(itemIndex).price/2;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*17-20);
			g2.drawString(text, x, y+30);
			
			
			
			//selling ITEMS
			if(gs.keys.enterPress == true) {
				if(gs.player.inventory.get(itemIndex) == gs.player.currentWeapon || 
						gs.player.inventory.get(itemIndex) == gs.player.currentShield) {
					selectedNum=0;
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue= "You cannot sell an \nequipped item!";
				}else {
					if(subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Maš plne vrecka čo ty \nchceš!";.amount > 1 ) {
						
					}
					gs.player.inventory.remove(itemIndex);
					gs.player.coin += price;
				}
					
			}
		}
	}
	
	public void drawInventory(Characters character, boolean cursor) {
		
		int frameX=0;
		int frameY=0;
		int frameWidth=0;
		int frameHeight=0;
		int slotCol=0;
		int slotRow=0;
		
		if(character == gs.player) {
			frameX = gs.sizeRect *11;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= playerSlotCol;
			slotRow= playerSlotRow;
		}else {
			frameX = gs.sizeRect *2;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= npcSlotCol;
			slotRow= npcSlotRow;
		}
		g2.setFont(purisaB);
		//window frame
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//SLot
		final int slotXstart= frameX + 20;
		final int slotYstart= frameY + 20;
		int slotX = slotXstart;
		int slotY = slotYstart;
		int slotSize= gs.sizeRect+3;
		
		//draw player items
		for(int i = 0; i < character.inventory.size(); i++) {
			//EQUIP cursor
			if(character.inventory.get(i)== character.currentWeapon || 
					character.inventory.get(i)== character.currentShield) {
				g2.setColor(new Color(179,98,0));
				g2.fillRoundRect(slotX, slotY, gs.sizeRect, gs.sizeRect,10,10);
			}
			
			g2.drawImage(character.inventory.get(i).down1, slotX, slotY, null );
			
			//display amount
			if(character.inventory.get(i).amount > 1) {
				g2.setFont(g2.getFont().deriveFont(32f));
				int amountX;
				int amountY;
				String s = ""+ character.inventory.get(i).amount;
				amountX=getXforAlignToRightText(s, slotX + 44);
				amountY= slotY + gs.sizeRect;
				
				//draw shadow number
				g2.setColor(new Color(60,60,60));
				g2.drawString(s, amountX, amountY);
				
				//number
				g2.setColor(Color.white);
				g2.drawString(s, amountX-3, amountY-3);
			}
			slotX += slotSize;
			
			if(i == 4 || i == 9 || i == 14){
				slotX = slotXstart;
				slotY += slotSize;
			}
		}
		
		// cursor
		if(cursor == true) {
			int cursorX = slotXstart + (slotSize * slotCol);
			int cursorY = slotYstart + (slotSize * slotRow);
			int cursorWidth = gs.sizeRect;
			int cursorHeight = gs.sizeRect;
			
			//draw cursor
			g2.setColor(new Color(169,169,169));
			//g2.fillRect(cursorX, cursorY, cursorWidth, cursorHeight);
			g2.setColor(Color.black);
			g2.setStroke(new BasicStroke(3));
			g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight,10 ,10);
			
			
			//DESCRIPTION FREAM
			int dFrameX=frameX;
			int dFrameY= frameY+frameHeight+10;
			int dFrameWidth= frameWidth;
			int dFrameHeight= gs.sizeRect*3;
			
			
			//text
			int textX = dFrameX+20;
			int textY= dFrameY+ gs.sizeRect;
			g2.setFont(g2.getFont().deriveFont(20F));
			
			int itemIndex = getItemIndexOnSlot(slotCol,slotRow);
			if(itemIndex < character.inventory.size()) {
				
				drawSubWind(dFrameX, dFrameY, dFrameWidth, dFrameHeight);
				
				for(String line : character.inventory.get(itemIndex).description.split("\n")) {
					g2.drawString(line, textX, textY);
					textY += 32;
				}
				
			}
		}
	}
	
	public int getItemIndexOnSlot(int slotCol, int slotRow) {
		int itemIndex = slotCol + (slotRow*5);
		return itemIndex;
	}
	
	public void drawTittleScreen() {
		if(titleScreenState == 0) {
			//background
			UtilityTool uTool = new UtilityTool();
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//tittle name
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,70));
			String text = "UNYZA ADVENTÜRE";
			int x = getXforCenteredText(text);
			int y = gs.sizeRect*3;
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+5, y+5);
			
			//ovca
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/ovca.png"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth-30, gs.screenHeight-30);
				//g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			x = (gs.sizeRect*8)- (gs.sizeRect/3) ;
			y = gs.sizeRect*2;
			g2.drawImage(unyza, x, y,gs.sizeRect-10, gs.sizeRect-10,null);
			
			
			
			//text gandalf
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			x=gs.screenWidth/2 + (gs.sizeRect*2);
			y += gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString("Skúl Gandalf", x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			
			g2.drawString("Skúl Gandalf", x+4, y+4);
			
			
			
			//gandalf
			x=gs.screenWidth/2 + (gs.sizeRect*3);
			y += gs.sizeRect;
			
			try {
				BufferedImage monster2 = ImageIO.read(getClass().getResourceAsStream("/img/oldman_down_1.png"));
				monster= uTool.scaleImage(monster2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(monster, x, y,gs.sizeRect*3, gs.sizeRect*3,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//monster
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,42));
			
			
			
			text = "New Game";
			x = gs.sizeRect*2;
			y = gs.sizeRect *7;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Load Game";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Options";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 2) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Quit";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 3) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
		}
		else if(titleScreenState == 1) {
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			String text = "";
			int x;
			int y=0;
			
			text="Play";
			x = gs.sizeRect;
			y += gs.sizeRect*10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
			}
			text="Back";
			x = gs.sizeRect;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
				
			}
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			text = "NAME : " + gs.id;
			x = gs.sizeRect;
			y = gs.sizeRect*2;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			text = "Your Default Stuff: ";
			x = gs.sizeRect - (gs.sizeRect/2);
			y = gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			x=gs.screenWidth - (gs.sizeRect*6);
			y=gs.sizeRect;
			
			try {
				BufferedImage stuff1 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff.png"));
				stuff11= uTool.scaleImage(stuff1, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff11, x, y,gs.sizeRect*5, gs.sizeRect*10,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			x=gs.screenWidth - (gs.sizeRect*12);
			y=gs.sizeRect*5;
			
			try {
				BufferedImage stuff2 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff2.png"));
				stuff22= uTool.scaleImage(stuff2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff22, x, y,gs.sizeRect*5, gs.sizeRect*6,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
	}
	
	public void drawDialogue() {
		//window
		g2.setFont(purisaB);
		int x=gs.sizeRect*3;
		int y=gs.sizeRect*7;
		int width=gs.screenWidth - (gs.sizeRect*6);
		int height= gs.sizeRect*4;
		
		drawSubWind(x, y, width, height);
		
		x += gs.sizeRect;
		y += gs.sizeRect+5;
		
		for(String line : currentDialogue.split("\n")) {
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,38));
			  g2.drawString(line, x, y); y +=52; 
			  }
		/*
		g2.setColor(new Color(0,0,0));
		String enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7, gs.sizeRect*5); 
		
		g2.setColor(new Color(252, 127, 3));
		enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7+3, gs.sizeRect*5+3);
		*/
	}
	
	public void drawSubWind(int x, int y , int width, int height) {
		Color c= new Color(252, 127, 3,200);
		g2.setColor(c);
		g2.fillRoundRect(x, y, width, height, 35, 35);
		
		c= new Color(0,0,0);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(5));
		g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);
		
	}
	
	public void drawPause() {
		g2.setFont(purisaB);
		//g2.setColor(Color.white);
		g2.setColor(Color.black);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,50));
		String text="PAUSED";
		int x= getXforCenteredText(text);
				
		
		int y= gs.screenHeight/2;
		
		g2.drawString(text, x, y);

		g2.setColor(new Color(252, 127, 3));
		x= getXforCenteredText(text);		
		y= gs.screenHeight/2;
		
		g2.drawString(text, x+3, y+3);
	}
	
	public int getXforCenteredText(String text) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=gs.screenWidth/2 - length/2;
		return x;
	}
	
	public int getXforAlignToRightText(String text,int tailX) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=tailX - length;
		return x;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-30 16:41:43.570
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-30 16:41:43.570
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-11-30 16:41:43.588
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.print.attribute.Size2DSyntax;

import characters.Characters;
import objects.OBJ_Heart;
import objects.OBJ_ManaBEER;
import objects.OBJ_Uniza_Coin;

public class UserInterf {

	GameScreen gs;
	UtilityTool uTool = new UtilityTool();
	Graphics2D g2;
	public Font purisaB;
	BufferedImage keyImage;
	BufferedImage uniza_heartF,ovca, uniza_heartH,uniza_heartB,beer_full ,beer_blank,unyza,monster,stuff11,stuff22,coin;
	public boolean messageOn = false;
	//public String message = "";
	//int messageCounter=0;
	ArrayList<String>message = new ArrayList<>();
	ArrayList<Integer>messageCount = new ArrayList<>();
	public boolean gameFinish=false;
	double playTIME;
	DecimalFormat dFormat = new DecimalFormat("#0.00");
	public String currentDialogue = "";
	public int selectedNum = 0;
	public int titleScreenState=0; // 0 firstScreen,  1 secondScreen
	public int playerSlotCol=0;
	public int playerSlotRow=0;
	public int npcSlotRow=0;
	public int npcSlotCol=0;
	int subState=0;
	int tranCounter =0;
	public Characters npc;
	
	
	public UserInterf(GameScreen gs) {
		this.gs=gs;
		
		
		try {
			InputStream is = getClass().getResourceAsStream("/font/purisa.ttf");
			purisaB = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//hearts
		Characters heart = new OBJ_Heart(gs);
		uniza_heartF = heart.image;
		uniza_heartH = heart.image2;
		uniza_heartB = heart.image3;
		
		Characters beer = new OBJ_ManaBEER(gs);
		beer_full = beer.image;
		beer_blank= beer.image2;
		
		Characters coin1= new OBJ_Uniza_Coin(gs);
		coin=coin1.down1;
	}
	
	public void addMessage(String text) {
		message.add(text);
		messageCount.add(0);
	}
	
	
	public void draw(Graphics2D g2) {
		this.g2=g2;
		
		g2.setColor(Color.white);
		
		//title
		if(gs.gameStates == gs.titleState) {
			drawTittleScreen();
		}
		
		//play
		if(gs.gameStates == gs.huntState) {
			drawLife();
			drawMessage();
		}
		
		//pause
		if(gs.gameStates == gs.pauseState) {
			drawLife();
			drawPause();
		}
		
		//dialogue
		if(gs.gameStates == gs.dialogState) {
			//drawLife();
			drawDialogue();
		}
		
		//character
		if(gs.gameStates == gs.characterState) {
			drawCharScreen();
			drawInventory(gs.player, true);
		}
		
		//options
		if(gs.gameStates == gs.optionState) {
			drawOptionsScreen();
		}
		
		//gameOver
		if(gs.gameStates == gs.gameOverState) {
			gs.stopMusic();
			drawGameOverScreen();
		}
		
		//transition state
		if(gs.gameStates == gs.transitionState) {
			drawTransition();
		}
		
		//transition state
		if(gs.gameStates == gs.tradingState) {
			drawTradingScreen();
		}
	}
	
	public void drawLife() {
		
		int x = gs.sizeRect;
		int y = gs.sizeRect - (gs.sizeRect/2);
		
		int i=0;
		
		//draw max life
		while(i <gs.player.maxLife/2) {
			g2.drawImage(uniza_heartB, x, y, null);
			i++;
			x+= gs.sizeRect;
		}
		
		//reset
		x = gs.sizeRect;
		y = gs.sizeRect - (gs.sizeRect/2);
		
		i=0;
		
		//current life
		while(i<gs.player.life) {
			g2.drawImage(uniza_heartH, x, y, null);
			i++;
			if(i <gs.player.life) {
				g2.drawImage(uniza_heartF, x, y, null);
			}
			i++;
			x += gs.sizeRect;
		}
		
		
		//max beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.maxMana) {
			g2.drawImage(beer_blank, x, y, null);
			i++;
			x+=35;
		}
		
		//beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.mana) {
			g2.drawImage(beer_full, x, y, null);
			i++;
			x+=35;
		}
		
	}
	
	public void drawTransition() {
		tranCounter++;
		g2.setColor(new Color(0,0,0,tranCounter*5));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		if(tranCounter == 50) {
			tranCounter= 0;
			gs.gameStates = gs.huntState;
			gs.currentMap = gs.events.tempMap;
			gs.player.worldX = gs.sizeRect * gs.events.tempCol;
			gs.player.worldY = gs.sizeRect * gs.events.tempRow;
			gs.events.previousEveX = gs.player.worldX;
			gs.events.previousEveY = gs.player.worldY;
		}
	}
	
	public void drawOptionsScreen() {
		g2.setColor(Color.white);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		//sub window
		
		int frameX = gs.sizeRect *6;
		int frameY= gs.sizeRect;
		int frameWidth= gs.sizeRect *8;
		int frameHeight= gs.sizeRect *10;
		
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		switch(subState) {
		case 0: optionsTop(frameX,frameY); break;
		case 1: options_fullScrNotif(frameX, frameY);break;
		case 2: options_control(frameX, frameY); break;
		case 3: options_endGameConf(frameX, frameY); break;
		}
		
		gs.keys.enterPress = false;
	}
	
	public void optionsTop(int frameX, int frameY) {
		int textX;
		int textY;
		
		String text = "OPTIONS";
		
		textX= getXforCenteredText(text);
		textY= frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		
		//full screen
		textX= frameX + gs.sizeRect;
		textY += gs.sizeRect*2;
		g2.drawString("FULL SCREEN" , textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				if(gs.fullscreenOn == false) {
					gs.fullscreenOn = true;
				}else if(gs.fullscreenOn == true) {
					gs.fullscreenOn = false;
				}
				subState = 1;
			}
		}
		
		//music
		textY+=gs.sizeRect;
		g2.drawString("MUSIC", textX, textY);
		if(selectedNum == 1) {
			g2.drawString(">", textX-25, textY);
		}
		
		//se
		textY+=gs.sizeRect;
		g2.drawString("SE", textX, textY);
		if(selectedNum == 2) {
			g2.drawString(">", textX-25, textY);
		}
		
		//control
		textY+=gs.sizeRect;
		g2.drawString("CONTROLS", textX, textY);
		if(selectedNum == 3) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState =2;
				selectedNum=0;
			}
		}
		
		
		//end game
		textY+=gs.sizeRect;
		g2.drawString("END GAME", textX, textY);
		if(selectedNum == 4) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=3;
				selectedNum = 0;
			}
		}
		
		
		//back
		textY+=gs.sizeRect*2;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 5) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				gs.gameStates= gs.huntState;
				selectedNum=0;
			}
		}
		
		//full screen box
		textX= frameX+ gs.sizeRect*6;
		textY= frameY+ gs.sizeRect*2 + 24;
		g2.setStroke(new BasicStroke(3));
		g2.drawRect(textX, textY, 24, 24);
		if(gs.fullscreenOn == true) {
			g2.fillRect(textX, textY, 24, 24);
		}
		
		//music volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24); // 120 /5 = 24 
		
		int volimeWidth = 24*gs.music.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		//se volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24);
		volimeWidth = 24*gs.se.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect-10;
		
		g2.drawImage(ovca,textX , textY,null);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect;
		
		g2.drawImage(ovca,textX , textY,null);
		
		
		gs.config.saveConf();

		
	}
	
	public void options_control(int frameX, int frameY) {
		String text = "CONTROL";
		int textX = getXforCenteredText(text);
		int textY = frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		g2.setFont(g2.getFont().deriveFont(19F));
		
		
		
		textX = frameX + gs.sizeRect;
		textY+= gs.sizeRect;
		
		g2.drawString("MOVE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("ATTACK/CONF", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("SHOOT/CAST", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("INVENTORY", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("PAUSE", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("OPTIONS", textX, textY);
		textY+= gs.sizeRect;
		
		//back
		textX = frameX + gs.sizeRect;
		textY = frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum=3;
			}
		}
		
		textX = frameX + gs.sizeRect*5;
		textY = frameY + gs.sizeRect*2;
		g2.setColor(Color.GRAY);
		
		g2.drawString("WASD", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ENTER", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("F", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("C", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("P", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ESCAPE", textX, textY);
		textY+= gs.sizeRect;
		
		
		
	}
	
	public void options_endGameConf(int frameX,int frameY) {
		int textX = frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect*3;
		
		currentDialogue = "QUIT the game and \nreturn to tittle \nscreen without saving!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//yes 
		String text = "YES";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect*3;
		g2.drawString(text, textX, textY);
		if(selectedNum==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				gs.gameStates = gs.titleState;
				titleScreenState = 0;
				gs.stopMusic();
				gs.restart();
			}
		}
		
		//no
		
		text = "NO";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect;
		g2.drawString(text, textX, textY);
		if(selectedNum==1) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum = 4;
			}
		}
	}
	
	public void options_fullScrNotif(int frameX, int frameY) {
		int textX= frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect;
		
		currentDialogue = "The change will take \neffect after \nrestarting the game!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//back
		textY= frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum ==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
			}
		}
	}
	
	public void drawMessage() {
		int messX = gs.sizeRect;
		int messY = gs.sizeRect*6;
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,28F));
		
		for(int i =0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.black);
				g2.drawString(message.get(i),messX,messY);
				
				g2.setColor(new Color(252, 127, 3,200));
				g2.drawString(message.get(i),messX+2,messY+2);
				
				int counter = messageCount.get(i) +1;	// messageCounter++
				messageCount.set(i, counter);			//set the counter to the array
				messY += 50;
				
				if(messageCount.get(i) > 180) {
					message.remove(i);
					messageCount.remove(i);
				}
			}
		}
	}
	
	public void drawCharScreen() {
		
		//window frame
		final int frameX = gs.sizeRect ;
		final int frameY = gs.sizeRect;
		final int frameWidth = gs.sizeRect*5;
		final int frameHeight = gs.sizeRect * 10;
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//text
		g2.setColor(Color.black);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		int textX = frameX + 20;
		int textY = frameY+gs.sizeRect;
		final int lineHeight = 35;
		
		//names
		g2.drawString("Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Life", textX, textY);
		textY += lineHeight;
		g2.drawString("Mana", textX, textY);
		textY += lineHeight;
		g2.drawString("Strength", textX, textY);
		textY += lineHeight;
		g2.drawString("Dexterity", textX, textY);
		textY += lineHeight;
		g2.drawString("Attack", textX, textY);
		textY += lineHeight;
		g2.drawString("Defense", textX, textY);
		textY += lineHeight;
		g2.drawString("Exp", textX, textY);
		textY += lineHeight;
		g2.drawString("Next Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Coin", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Weapon", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Shield", textX, textY);
		textY += lineHeight;
		
		
		//values 
		int tailX = (frameX + frameWidth)- 30;
		//reset
		textY = frameY + gs.sizeRect;
		String value;
		
		
		value= String.valueOf(gs.player.level);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.life +"/"+ gs.player.maxLife);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.mana +"/"+ gs.player.maxMana);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.strength);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.dexterity);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.attack);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		
		value= String.valueOf(gs.player.defense);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.exp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.nextLevelExp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.coin);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += 15;
		
		g2.drawImage(gs.player.currentWeapon.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		g2.drawImage(gs.player.currentShield.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		
		
	}
	
	public void drawGameOverScreen() {
		
		g2.setColor(new Color(0,0,0,150));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		int x;
		int y;
		String text;
		
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,110f));
		
		text = "GAME OVER!";
		
		g2.setColor(Color.black);
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x+5, y+5);
		
		//retry
		g2.setFont(g2.getFont().deriveFont(50f));
		g2.setColor(Color.black);
		text="Retry";
		x =getXforCenteredText(text);
		y +=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 0) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
		//quit
		g2.setColor(Color.black);
		text="QUIT";
		x =getXforCenteredText(text);
		y += 55;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 1) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
	}
	
	public void drawTradingScreen() {
		
		switch(subState) {
		case 0: trade_select();break;
		case 1: trade_buy();break;
		case 2: trade_sell();break;
		}
		gs.keys.enterPress = false;
	}
	
	public void trade_select() {
		int x,y,width,height;
		drawDialogue();
		g2.setFont(g2.getFont().deriveFont(50f));
		String uniza = "SPONZORYNG FEYT UNYZA!";
		x= gs.sizeRect;
		y=gs.sizeRect*2;
		g2.drawString(uniza, x, y);
		
		g2.setColor(new Color(252, 127, 3));
		g2.drawString(uniza, x+4, y+4);
		
		//draw window
		x= gs.sizeRect *14;
		y= gs.sizeRect *3;
		
		width= gs.sizeRect*3;
		height= (int)(gs.sizeRect * 3.5);
		
		drawSubWind(x, y, width, height);
		
		//draw texts
		g2.setFont(g2.getFont().deriveFont(26f));
		
		x += gs.sizeRect;
		y += gs.sizeRect;
		g2.drawString("Buy", x, y);
		if(selectedNum == 0) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 1;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Sell", x, y);
		if(selectedNum == 1) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				subState = 2;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Leave", x, y);
		if(selectedNum == 2) {
			g2.drawString(">", x-24, y);
			if(gs.keys.enterPress == true) {
				selectedNum = 0;
				gs.gameStates = gs.dialogState;
				currentDialogue = "Come again, hehe!";
			}
		}
		
	}
	
	public void trade_buy() {
		
		//draw player inventory
		drawInventory(gs.player, false);
		//draw npc inventory
		drawInventory(npc, true);
		
		//draw hint window
		int x = gs.sizeRect*2;
		int y = gs.sizeRect*9+15;
		int width = gs.sizeRect*6;
		int height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(npcSlotCol, npcSlotRow);
		if(itemIndex < npc.inventory.size()) {
			x=(int)(gs.sizeRect*5.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = npc.inventory.get(itemIndex).price;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*8-20);
			g2.drawString(text, x, y+30);
			
			
			
			//BUYING ITEMS
			if(gs.keys.enterPress == true) {
				if(npc.inventory.get(itemIndex).price > gs.player.coin) {
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Nemáš love , čo by si \nchcel?";
					drawDialogue();
				}else {
					if(gs.player.canObtainItem(npc.inventory.get(itemIndex)) == true) {
						gs.player.coin -= npc.inventory.get(itemIndex).price;
					}else {
						subState=0;
						gs.gameStates = gs.dialogState;
						currentDialogue = "Maš plne vrecka čo ty \nchceš!";
					}
				}
			}
		}
	}
	
	public void trade_sell() {
		//draw player invetory
		
		drawInventory(gs.player, true);
		int x;
		int y;
		int width;
		int height;
		
		//draw hint window
		x = gs.sizeRect*2;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Back", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Your coin: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(playerSlotCol, playerSlotRow);
		if(itemIndex < gs.player.inventory.size()) {
			x=(int)(gs.sizeRect*14.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = gs.player.inventory.get(itemIndex).price/2;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*17-20);
			g2.drawString(text, x, y+30);
			
			
			
			//selling ITEMS
			if(gs.keys.enterPress == true) {
				if(gs.player.inventory.get(itemIndex) == gs.player.currentWeapon || 
						gs.player.inventory.get(itemIndex) == gs.player.currentShield) {
					selectedNum=0;
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue= "You cannot sell an \nequipped item!";
				}else {
					if(subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Maš plne vrecka čo ty \nchceš!";.amount > 1 ) {
						
					}
					gs.player.inventory.remove(itemIndex);
					gs.player.coin += price;
				}
					
			}
		}
	}
	
	public void drawInventory(Characters character, boolean cursor) {
		
		int frameX=0;
		int frameY=0;
		int frameWidth=0;
		int frameHeight=0;
		int slotCol=0;
		int slotRow=0;
		
		if(character == gs.player) {
			frameX = gs.sizeRect *11;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= playerSlotCol;
			slotRow= playerSlotRow;
		}else {
			frameX = gs.sizeRect *2;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= npcSlotCol;
			slotRow= npcSlotRow;
		}
		g2.setFont(purisaB);
		//window frame
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//SLot
		final int slotXstart= frameX + 20;
		final int slotYstart= frameY + 20;
		int slotX = slotXstart;
		int slotY = slotYstart;
		int slotSize= gs.sizeRect+3;
		
		//draw player items
		for(int i = 0; i < character.inventory.size(); i++) {
			//EQUIP cursor
			if(character.inventory.get(i)== character.currentWeapon || 
					character.inventory.get(i)== character.currentShield) {
				g2.setColor(new Color(179,98,0));
				g2.fillRoundRect(slotX, slotY, gs.sizeRect, gs.sizeRect,10,10);
			}
			
			g2.drawImage(character.inventory.get(i).down1, slotX, slotY, null );
			
			//display amount
			if(character.inventory.get(i).amount > 1) {
				g2.setFont(g2.getFont().deriveFont(32f));
				int amountX;
				int amountY;
				String s = ""+ character.inventory.get(i).amount;
				amountX=getXforAlignToRightText(s, slotX + 44);
				amountY= slotY + gs.sizeRect;
				
				//draw shadow number
				g2.setColor(new Color(60,60,60));
				g2.drawString(s, amountX, amountY);
				
				//number
				g2.setColor(Color.white);
				g2.drawString(s, amountX-3, amountY-3);
			}
			slotX += slotSize;
			
			if(i == 4 || i == 9 || i == 14){
				slotX = slotXstart;
				slotY += slotSize;
			}
		}
		
		// cursor
		if(cursor == true) {
			int cursorX = slotXstart + (slotSize * slotCol);
			int cursorY = slotYstart + (slotSize * slotRow);
			int cursorWidth = gs.sizeRect;
			int cursorHeight = gs.sizeRect;
			
			//draw cursor
			g2.setColor(new Color(169,169,169));
			//g2.fillRect(cursorX, cursorY, cursorWidth, cursorHeight);
			g2.setColor(Color.black);
			g2.setStroke(new BasicStroke(3));
			g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight,10 ,10);
			
			
			//DESCRIPTION FREAM
			int dFrameX=frameX;
			int dFrameY= frameY+frameHeight+10;
			int dFrameWidth= frameWidth;
			int dFrameHeight= gs.sizeRect*3;
			
			
			//text
			int textX = dFrameX+20;
			int textY= dFrameY+ gs.sizeRect;
			g2.setFont(g2.getFont().deriveFont(20F));
			
			int itemIndex = getItemIndexOnSlot(slotCol,slotRow);
			if(itemIndex < character.inventory.size()) {
				
				drawSubWind(dFrameX, dFrameY, dFrameWidth, dFrameHeight);
				
				for(String line : character.inventory.get(itemIndex).description.split("\n")) {
					g2.drawString(line, textX, textY);
					textY += 32;
				}
				
			}
		}
	}
	
	public int getItemIndexOnSlot(int slotCol, int slotRow) {
		int itemIndex = slotCol + (slotRow*5);
		return itemIndex;
	}
	
	public void drawTittleScreen() {
		if(titleScreenState == 0) {
			//background
			UtilityTool uTool = new UtilityTool();
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//tittle name
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,70));
			String text = "UNYZA ADVENTÜRE";
			int x = getXforCenteredText(text);
			int y = gs.sizeRect*3;
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+5, y+5);
			
			//ovca
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/ovca.png"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth-30, gs.screenHeight-30);
				//g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			x = (gs.sizeRect*8)- (gs.sizeRect/3) ;
			y = gs.sizeRect*2;
			g2.drawImage(unyza, x, y,gs.sizeRect-10, gs.sizeRect-10,null);
			
			
			
			//text gandalf
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			x=gs.screenWidth/2 + (gs.sizeRect*2);
			y += gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString("Skúl Gandalf", x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			
			g2.drawString("Skúl Gandalf", x+4, y+4);
			
			
			
			//gandalf
			x=gs.screenWidth/2 + (gs.sizeRect*3);
			y += gs.sizeRect;
			
			try {
				BufferedImage monster2 = ImageIO.read(getClass().getResourceAsStream("/img/oldman_down_1.png"));
				monster= uTool.scaleImage(monster2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(monster, x, y,gs.sizeRect*3, gs.sizeRect*3,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//monster
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,42));
			
			
			
			text = "New Game";
			x = gs.sizeRect*2;
			y = gs.sizeRect *7;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Load Game";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Options";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 2) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Quit";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 3) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
		}
		else if(titleScreenState == 1) {
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			String text = "";
			int x;
			int y=0;
			
			text="Play";
			x = gs.sizeRect;
			y += gs.sizeRect*10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
			}
			text="Back";
			x = gs.sizeRect;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
				
			}
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			text = "NAME : " + gs.id;
			x = gs.sizeRect;
			y = gs.sizeRect*2;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			text = "Your Default Stuff: ";
			x = gs.sizeRect - (gs.sizeRect/2);
			y = gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			x=gs.screenWidth - (gs.sizeRect*6);
			y=gs.sizeRect;
			
			try {
				BufferedImage stuff1 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff.png"));
				stuff11= uTool.scaleImage(stuff1, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff11, x, y,gs.sizeRect*5, gs.sizeRect*10,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			x=gs.screenWidth - (gs.sizeRect*12);
			y=gs.sizeRect*5;
			
			try {
				BufferedImage stuff2 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff2.png"));
				stuff22= uTool.scaleImage(stuff2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff22, x, y,gs.sizeRect*5, gs.sizeRect*6,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
	}
	
	public void drawDialogue() {
		//window
		g2.setFont(purisaB);
		int x=gs.sizeRect*3;
		int y=gs.sizeRect*7;
		int width=gs.screenWidth - (gs.sizeRect*6);
		int height= gs.sizeRect*4;
		
		drawSubWind(x, y, width, height);
		
		x += gs.sizeRect;
		y += gs.sizeRect+5;
		
		for(String line : currentDialogue.split("\n")) {
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,38));
			  g2.drawString(line, x, y); y +=52; 
			  }
		/*
		g2.setColor(new Color(0,0,0));
		String enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7, gs.sizeRect*5); 
		
		g2.setColor(new Color(252, 127, 3));
		enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7+3, gs.sizeRect*5+3);
		*/
	}
	
	public void drawSubWind(int x, int y , int width, int height) {
		Color c= new Color(252, 127, 3,200);
		g2.setColor(c);
		g2.fillRoundRect(x, y, width, height, 35, 35);
		
		c= new Color(0,0,0);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(5));
		g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);
		
	}
	
	public void drawPause() {
		g2.setFont(purisaB);
		//g2.setColor(Color.white);
		g2.setColor(Color.black);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,50));
		String text="PAUSED";
		int x= getXforCenteredText(text);
				
		
		int y= gs.screenHeight/2;
		
		g2.drawString(text, x, y);

		g2.setColor(new Color(252, 127, 3));
		x= getXforCenteredText(text);		
		y= gs.screenHeight/2;
		
		g2.drawString(text, x+3, y+3);
	}
	
	public int getXforCenteredText(String text) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=gs.screenWidth/2 - length/2;
		return x;
	}
	
	public int getXforAlignToRightText(String text,int tailX) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=tailX - length;
		return x;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-11-30 16:41:43.589
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-11-30 16:41:43.589
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2022-11-30 20:40:42.304 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=19.0.1
java.vendor=BellSoft
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-11-30 20:41:03.412
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-30 20:41:03.412
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-11-30 20:41:03.412
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-11-30 20:41:08.031
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-12-01 09:19:45.852
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.print.attribute.Size2DSyntax;

import characters.Characters;
import objects.OBJ_Heart;
import objects.OBJ_ManaBEER;
import objects.OBJ_Uniza_Coin;

public class UserInterf {

	GameScreen gs;
	UtilityTool uTool = new UtilityTool();
	Graphics2D g2;
	public Font purisaB;
	BufferedImage keyImage;
	BufferedImage uniza_heartF,ovca, uniza_heartH,uniza_heartB,beer_full ,beer_blank,unyza,monster,stuff11,stuff22,coin;
	public boolean messageOn = false;
	//public String message = "";
	//int messageCounter=0;
	ArrayList<String>message = new ArrayList<>();
	ArrayList<Integer>messageCount = new ArrayList<>();
	public boolean gameFinish=false;
	double playTIME;
	DecimalFormat dFormat = new DecimalFormat("#0.00");
	public String currentDialogue = "";
	public int selectedNum = 0;
	public int titleScreenState=0; // 0 firstScreen,  1 secondScreen
	public int playerSlotCol=0;
	public int playerSlotRow=0;
	public int npcSlotRow=0;
	public int npcSlotCol=0;
	int subState=0;
	int tranCounter =0;
	public Characters npc;
	
	
	public UserInterf(GameScreen gs) {
		this.gs=gs;
		
		
		try {
			InputStream is = getClass().getResourceAsStream("/font/purisa.ttf");
			purisaB = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//hearts
		Characters heart = new OBJ_Heart(gs);
		uniza_heartF = heart.image;
		uniza_heartH = heart.image2;
		uniza_heartB = heart.image3;
		
		Characters beer = new OBJ_ManaBEER(gs);
		beer_full = beer.image;
		beer_blank= beer.image2;
		
		Characters coin1= new OBJ_Uniza_Coin(gs);
		coin=coin1.down1;
	}
	
	public void addMessage(String text) {
		message.add(text);
		messageCount.add(0);
	}
	
	
	public void draw(Graphics2D g2) {
		this.g2=g2;
		
		g2.setColor(Color.white);
		
		//title
		if(gs.gameStates == gs.titleState) {
			drawTittleScreen();
		}
		
		//play
		if(gs.gameStates == gs.huntState) {
			drawLife();
			drawMessage();
		}
		
		//pause
		if(gs.gameStates == gs.pauseState) {
			drawLife();
			drawPause();
		}
		
		//dialogue
		if(gs.gameStates == gs.dialogState) {
			//drawLife();
			drawDialogue();
		}
		
		//character
		if(gs.gameStates == gs.characterState) {
			drawCharScreen();
			drawInventory(gs.player, true);
		}
		
		//options
		if(gs.gameStates == gs.optionState) {
			drawOptionsScreen();
		}
		
		//gameOver
		if(gs.gameStates == gs.gameOverState) {
			gs.stopMusic();
			drawGameOverScreen();
		}
		
		//transition state
		if(gs.gameStates == gs.transitionState) {
			drawTransition();
		}
		
		//transition state
		if(gs.gameStates == gs.tradingState) {
			drawTradingScreen();
		}
		
		//sleep state
		if(gs.gameStates == gs.sleepState) {
			drawSleepScreen();
		}
	}
	
	public void drawLife() {
		
		int x = gs.sizeRect;
		int y = gs.sizeRect - (gs.sizeRect/2);
		
		int i=0;
		
		//draw max life
		while(i <gs.player.maxLife/2) {
			g2.drawImage(uniza_heartB, x, y, null);
			i++;
			x+= gs.sizeRect;
		}
		
		//reset
		x = gs.sizeRect;
		y = gs.sizeRect - (gs.sizeRect/2);
		
		i=0;
		
		//current life
		while(i<gs.player.life) {
			g2.drawImage(uniza_heartH, x, y, null);
			i++;
			if(i <gs.player.life) {
				g2.drawImage(uniza_heartF, x, y, null);
			}
			i++;
			x += gs.sizeRect;
		}
		
		
		//max beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.maxMana) {
			g2.drawImage(beer_blank, x, y, null);
			i++;
			x+=35;
		}
		
		//beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.mana) {
			g2.drawImage(beer_full, x, y, null);
			i++;
			x+=35;
		}
		
	}
	
	public void drawTransition() {
		tranCounter++;
		g2.setColor(new Color(0,0,0,tranCounter*5));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		if(tranCounter == 50) {
			tranCounter= 0;
			gs.gameStates = gs.huntState;
			gs.currentMap = gs.events.tempMap;
			gs.player.worldX = gs.sizeRect * gs.events.tempCol;
			gs.player.worldY = gs.sizeRect * gs.events.tempRow;
			gs.events.previousEveX = gs.player.worldX;
			gs.events.previousEveY = gs.player.worldY;
		}
	}
	
	public void drawOptionsScreen() {
		g2.setColor(Color.white);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		//sub window
		
		int frameX = gs.sizeRect *6;
		int frameY= gs.sizeRect;
		int frameWidth= gs.sizeRect *8;
		int frameHeight= gs.sizeRect *10;
		
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		switch(subState) {
		case 0: optionsTop(frameX,frameY); break;
		case 1: options_fullScrNotif(frameX, frameY);break;
		case 2: options_control(frameX, frameY); break;
		case 3: options_endGameConf(frameX, frameY); break;
		}
		
		gs.keys.enterPress = false;
	}
	
	public void optionsTop(int frameX, int frameY) {
		int textX;
		int textY;
		
		String text = "MOŽNOSTI";
		
		textX= getXforCenteredText(text);
		textY= frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		
		//full screen
		textX= frameX + gs.sizeRect;
		textY += gs.sizeRect*2;
		g2.drawString("FULL SCREEN" , textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				if(gs.fullscreenOn == false) {
					gs.fullscreenOn = true;
				}else if(gs.fullscreenOn == true) {
					gs.fullscreenOn = false;
				}
				subState = 1;
			}
		}
		
		//music
		textY+=gs.sizeRect;
		g2.drawString("HUDBA", textX, textY);
		if(selectedNum == 1) {
			g2.drawString(">", textX-25, textY);
		}
		
		//se
		textY+=gs.sizeRect;
		g2.drawString("EFEKTY", textX, textY);
		if(selectedNum == 2) {
			g2.drawString(">", textX-25, textY);
		}
		
		//control
		textY+=gs.sizeRect;
		g2.drawString("OVLÁDANIE", textX, textY);
		if(selectedNum == 3) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState =2;
				selectedNum=0;
			}
		}
		
		
		//end game
		textY+=gs.sizeRect;
		g2.drawString("KONEC HRY", textX, textY);
		if(selectedNum == 4) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=3;
				selectedNum = 0;
			}
		}
		
		
		//back
		textY+=gs.sizeRect*2;
		g2.drawString("SPÄŤ", textX, textY);
		if(selectedNum == 5) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				gs.gameStates= gs.huntState;
				selectedNum=0;
			}
		}
		
		//full screen box
		textX= frameX+ gs.sizeRect*6;
		textY= frameY+ gs.sizeRect*2 + 24;
		g2.setStroke(new BasicStroke(3));
		g2.drawRect(textX, textY, 24, 24);
		if(gs.fullscreenOn == true) {
			g2.fillRect(textX, textY, 24, 24);
		}
		
		//music volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24); // 120 /5 = 24 
		
		int volimeWidth = 24*gs.music.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		//se volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24);
		volimeWidth = 24*gs.se.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect-10;
		
		g2.drawImage(ovca,textX , textY,null);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect;
		
		g2.drawImage(ovca,textX , textY,null);
		
		
		gs.config.saveConf();

		
	}
	
	public void options_control(int frameX, int frameY) {
		String text = "OVLÁDANIE";
		int textX = getXforCenteredText(text);
		int textY = frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		g2.setFont(g2.getFont().deriveFont(19F));
		
		
		
		textX = frameX + gs.sizeRect;
		textY+= gs.sizeRect;
		
		g2.drawString("POHYB", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("ÚTOK", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("STREĽBA", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("INVENTOR", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("PAUZA", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("MOŽNOSTI", textX, textY);
		textY+= gs.sizeRect;
		
		//back
		textX = frameX + gs.sizeRect;
		textY = frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum=3;
			}
		}
		
		textX = frameX + gs.sizeRect*5;
		textY = frameY + gs.sizeRect*2;
		g2.setColor(Color.GRAY);
		
		g2.drawString("WASD", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ENTER", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("F", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("C", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("P", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ESCAPE", textX, textY);
		textY+= gs.sizeRect;
		
		
		
	}
	
	public void options_endGameConf(int frameX,int frameY) {
		int textX = frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect*3;
		
		currentDialogue = "Odíd, ale hra nebude \nuložená!!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//yes 
		String text = "ANO";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect*3;
		g2.drawString(text, textX, textY);
		if(selectedNum==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				gs.gameStates = gs.titleState;
				titleScreenState = 0;
				gs.stopMusic();
				gs.restart();
			}
		}
		
		//no
		
		text = "NIE";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect;
		g2.drawString(text, textX, textY);
		if(selectedNum==1) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum = 4;
			}
		}
	}
	
	public void options_fullScrNotif(int frameX, int frameY) {
		int textX= frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect;
		
		currentDialogue = "The change will take \neffect after \nrestarting the game!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//back
		textY= frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum ==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
			}
		}
	}
	
	public void drawMessage() {
		int messX = gs.sizeRect;
		int messY = gs.sizeRect*6;
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,28F));
		
		for(int i =0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.black);
				g2.drawString(message.get(i),messX,messY);
				
				g2.setColor(new Color(252, 127, 3,200));
				g2.drawString(message.get(i),messX+2,messY+2);
				
				int counter = messageCount.get(i) +1;	// messageCounter++
				messageCount.set(i, counter);			//set the counter to the array
				messY += 50;
				
				if(messageCount.get(i) > 180) {
					message.remove(i);
					messageCount.remove(i);
				}
			}
		}
	}
	
	public void drawSleepScreen() {
		tranCounter++;
		
		if(tranCounter <120) {
			gs.eManag.light.filterAlpha += 0.01f;
			if(gs.eManag.light.filterAlpha > 1f) {
				gs.eManag.light.filterAlpha = 1f;
			}
		}
		if(tranCounter >= 120) {
			gs.eManag.light.filterAlpha -0
		}
	}
	
	public void drawCharScreen() {
		
		//window frame
		final int frameX = gs.sizeRect ;
		final int frameY = gs.sizeRect;
		final int frameWidth = gs.sizeRect*5;
		final int frameHeight = gs.sizeRect * 10;
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//text
		g2.setColor(Color.black);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		int textX = frameX + 20;
		int textY = frameY+gs.sizeRect;
		final int lineHeight = 35;
		
		//names
		g2.drawString("Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Život", textX, textY);
		textY += lineHeight;
		g2.drawString("Mana", textX, textY);
		textY += lineHeight;
		g2.drawString("Sila", textX, textY);
		textY += lineHeight;
		g2.drawString("Obratnosť", textX, textY);
		textY += lineHeight;
		g2.drawString("Útok", textX, textY);
		textY += lineHeight;
		g2.drawString("Obrana", textX, textY);
		textY += lineHeight;
		g2.drawString("Exp", textX, textY);
		textY += lineHeight;
		g2.drawString("Další Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Dolár", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Zbraň", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Štít", textX, textY);
		textY += lineHeight;
		
		
		//values 
		int tailX = (frameX + frameWidth)- 30;
		//reset
		textY = frameY + gs.sizeRect;
		String value;
		
		
		value= String.valueOf(gs.player.level);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.life +"/"+ gs.player.maxLife);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.mana +"/"+ gs.player.maxMana);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.strength);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.dexterity);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.attack);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		
		value= String.valueOf(gs.player.defense);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.exp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.nextLevelExp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.coin);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += 15;
		
		g2.drawImage(gs.player.currentWeapon.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		g2.drawImage(gs.player.currentShield.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		
		
	}
	
	public void drawGameOverScreen() {
		
		g2.setColor(new Color(0,0,0,150));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		int x;
		int y;
		String text;
		
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,110f));
		
		text = "GAME OVER!";
		
		g2.setColor(Color.black);
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x+5, y+5);
		
		//retry
		g2.setFont(g2.getFont().deriveFont(50f));
		g2.setColor(Color.black);
		text="Skúsiť znova!";
		x =getXforCenteredText(text);
		y +=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 0) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
		//quit
		g2.setColor(Color.black);
		text="Ukončiť hru!";
		x =getXforCenteredText(text);
		y += 60;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 1) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
	}
	
	public void drawTradingScreen() {
		
		switch(subState) {
		case 0: trade_select();break;
		case 1: trade_buy();break;
		case 2: trade_sell();break;
		}
		gs.keys.enterPress = false;
	}
	
	public void trade_select() {
		int x,y,width,height;
		drawDialogue();
		g2.setFont(g2.getFont().deriveFont(50f));
		String uniza = "SPONZORYNG FEYT UNYZA!";
		x= gs.sizeRect;
		y=gs.sizeRect*2;
		g2.drawString(uniza, x, y);
		
		g2.setColor(new Color(252, 127, 3));
		g2.drawString(uniza, x+4, y+4);
		
		//draw window
		x= gs.sizeRect *14;
		y= gs.sizeRect *3;
		
		width= gs.sizeRect*3;
		height= (int)(gs.sizeRect * 3.5);
		
		drawSubWind(x, y, width, height);
		
		//draw texts
		g2.setFont(g2.getFont().deriveFont(26f));
		
		x += gs.sizeRect;
		y += gs.sizeRect;
		g2.drawString("Kúpa", x-15, y);
		if(selectedNum == 0) {
			g2.drawString(">", x-34, y);
			if(gs.keys.enterPress == true) {
				subState = 1;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Predaj", x-15, y);
		if(selectedNum == 1) {
			g2.drawString(">", x-34, y);
			if(gs.keys.enterPress == true) {
				subState = 2;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Späť", x-15, y);
		if(selectedNum == 2) {
			g2.drawString(">", x-34, y);
			if(gs.keys.enterPress == true) {
				selectedNum = 0;
				gs.gameStates = gs.dialogState;
				currentDialogue = "Maj sa, nabudúce kúp \nteho vác";
			}
		}
		
	}
	
	public void trade_buy() {
		
		//draw player inventory
		drawInventory(gs.player, false);
		//draw npc inventory
		drawInventory(npc, true);
		
		//draw hint window
		int x = gs.sizeRect*2;
		int y = gs.sizeRect*9+15;
		int width = gs.sizeRect*6;
		int height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Späť", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Doláros: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(npcSlotCol, npcSlotRow);
		if(itemIndex < npc.inventory.size()) {
			x=(int)(gs.sizeRect*5.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = npc.inventory.get(itemIndex).price;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*8-20);
			g2.drawString(text, x, y+30);
			
			
			
			//BUYING ITEMS
			if(gs.keys.enterPress == true) {
				if(npc.inventory.get(itemIndex).price > gs.player.coin) {
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Nemáš love , čo by si \nchcel?";
					drawDialogue();
				}else {
					if(gs.player.canObtainItem(npc.inventory.get(itemIndex)) == true) {
						gs.player.coin -= npc.inventory.get(itemIndex).price;
					}else {
						subState=0;
						gs.gameStates = gs.dialogState;
						currentDialogue = "Maš plné vrecka čo ty \nchceš!";
					}
				}
			}
		}
	}
	
	public void trade_sell() {
		//draw player invetory
		
		drawInventory(gs.player, true);
		int x;
		int y;
		int width;
		int height;
		
		//draw hint window
		x = gs.sizeRect*2;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Späť", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Doláros: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(playerSlotCol, playerSlotRow);
		if(itemIndex < gs.player.inventory.size()) {
			x=(int)(gs.sizeRect*14.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = gs.player.inventory.get(itemIndex).price/2;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*17-20);
			g2.drawString(text, x, y+30);
			
			
			
			//selling ITEMS
			if(gs.keys.enterPress == true) {
				if(gs.player.inventory.get(itemIndex) == gs.player.currentWeapon || 
						gs.player.inventory.get(itemIndex) == gs.player.currentShield) {
					selectedNum=0;
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue= "Vybavené náradičko,\nnemôžeš predať!!!";
				}else {
					if(gs.player.inventory.get(itemIndex).amount > 1 ) {
						gs.player.inventory.get(itemIndex).amount--;
					}else {
						gs.player.inventory.remove(itemIndex);
					}
					gs.player.coin += price;
				}
					
			}
		}
	}
	
	public void drawInventory(Characters character, boolean cursor) {
		
		int frameX=0;
		int frameY=0;
		int frameWidth=0;
		int frameHeight=0;
		int slotCol=0;
		int slotRow=0;
		
		if(character == gs.player) {
			frameX = gs.sizeRect *11;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= playerSlotCol;
			slotRow= playerSlotRow;
		}else {
			frameX = gs.sizeRect *2;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= npcSlotCol;
			slotRow= npcSlotRow;
		}
		g2.setFont(purisaB);
		//window frame
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//SLot
		final int slotXstart= frameX + 20;
		final int slotYstart= frameY + 20;
		int slotX = slotXstart;
		int slotY = slotYstart;
		int slotSize= gs.sizeRect+3;
		
		//draw player items
		for(int i = 0; i < character.inventory.size(); i++) {
			//EQUIP cursor
			if(character.inventory.get(i)== character.currentWeapon || 
					character.inventory.get(i)== character.currentShield ||
					character.inventory.get(i)== character.currentLight) {
				g2.setColor(new Color(179,98,0));
				g2.fillRoundRect(slotX, slotY, gs.sizeRect, gs.sizeRect,10,10);
			}
			
			g2.drawImage(character.inventory.get(i).down1, slotX, slotY, null );
			
			//display amount
			if(character == gs.player && character.inventory.get(i).amount > 1) {
				g2.setFont(g2.getFont().deriveFont(32f));
				int amountX;
				int amountY;
				String s = ""+ character.inventory.get(i).amount;
				amountX=getXforAlignToRightText(s, slotX + 44);
				amountY= slotY + gs.sizeRect;
				
				//draw shadow number
				g2.setColor(new Color(60,60,60));
				g2.drawString(s, amountX, amountY);
				
				//number
				g2.setColor(Color.yellow
						);
				g2.drawString(s, amountX-3, amountY-3);
			}
			slotX += slotSize;
			
			if(i == 4 || i == 9 || i == 14){
				slotX = slotXstart;
				slotY += slotSize;
			}
		}
		
		// cursor
		if(cursor == true) {
			int cursorX = slotXstart + (slotSize * slotCol);
			int cursorY = slotYstart + (slotSize * slotRow);
			int cursorWidth = gs.sizeRect;
			int cursorHeight = gs.sizeRect;
			
			//draw cursor
			g2.setColor(new Color(169,169,169));
			//g2.fillRect(cursorX, cursorY, cursorWidth, cursorHeight);
			g2.setColor(Color.black);
			g2.setStroke(new BasicStroke(3));
			g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight,10 ,10);
			
			
			//DESCRIPTION FREAM
			int dFrameX=frameX;
			int dFrameY= frameY+frameHeight+10;
			int dFrameWidth= frameWidth;
			int dFrameHeight= gs.sizeRect*3;
			
			
			//text
			int textX = dFrameX+20;
			int textY= dFrameY+ gs.sizeRect;
			g2.setFont(g2.getFont().deriveFont(20F));
			
			int itemIndex = getItemIndexOnSlot(slotCol,slotRow);
			if(itemIndex < character.inventory.size()) {
				
				drawSubWind(dFrameX, dFrameY, dFrameWidth, dFrameHeight);
				
				for(String line : character.inventory.get(itemIndex).description.split("\n")) {
					g2.drawString(line, textX, textY);
					textY += 32;
				}
				
			}
		}
	}
	
	public int getItemIndexOnSlot(int slotCol, int slotRow) {
		int itemIndex = slotCol + (slotRow*5);
		return itemIndex;
	}
	
	public void drawTittleScreen() {
		if(titleScreenState == 0) {
			//background
			UtilityTool uTool = new UtilityTool();
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//tittle name
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,70));
			String text = "UNYZA ADVENTÜRE";
			int x = getXforCenteredText(text);
			int y = gs.sizeRect*3;
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+5, y+5);
			
			//ovca
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/ovca.png"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth-30, gs.screenHeight-30);
				//g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			x = (gs.sizeRect*8)- (gs.sizeRect/3) ;
			y = gs.sizeRect*2;
			g2.drawImage(unyza, x, y,gs.sizeRect-10, gs.sizeRect-10,null);
			
			
			
			//text gandalf
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			x=gs.screenWidth/2 + (gs.sizeRect*2);
			y += gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString("Skúl Gandalf", x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			
			g2.drawString("Skúl Gandalf", x+4, y+4);
			
			
			
			//gandalf
			x=gs.screenWidth/2 + (gs.sizeRect*3);
			y += gs.sizeRect;
			
			try {
				BufferedImage monster2 = ImageIO.read(getClass().getResourceAsStream("/img/oldman_down_1.png"));
				monster= uTool.scaleImage(monster2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(monster, x, y,gs.sizeRect*3, gs.sizeRect*3,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//monster
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,42));
			
			
			
			text = "Nová hra";
			x = gs.sizeRect*2;
			y = gs.sizeRect *7+10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Načítaj";
			x = gs.sizeRect*2;
			y += gs.sizeRect+5;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Možnosti";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 2) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Ukončiť hru";
			x = gs.sizeRect*2;
			y += gs.sizeRect+5;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 3) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
		}
		else if(titleScreenState == 1) {
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			String text = "";
			int x;
			int y=0;
			
			text="Hrať";
			x = gs.sizeRect;
			y += gs.sizeRect*10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
			}
			text="Späť";
			x = gs.sizeRect;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
				
			}
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			text = "Krycia prezývka : " + gs.id;
			x = gs.sizeRect- (gs.sizeRect/2);
			y = gs.sizeRect*2;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			text = "Tvoja výbava, vagoš: ";
			x = gs.sizeRect - (gs.sizeRect/2);
			y = gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			x=gs.screenWidth - (gs.sizeRect*6);
			y=gs.sizeRect;
			
			try {
				BufferedImage stuff1 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff.png"));
				stuff11= uTool.scaleImage(stuff1, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff11, x, y,gs.sizeRect*5, gs.sizeRect*10,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			x=gs.screenWidth - (gs.sizeRect*12);
			y=gs.sizeRect*5;
			
			try {
				BufferedImage stuff2 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff2.png"));
				stuff22= uTool.scaleImage(stuff2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff22, x, y,gs.sizeRect*5, gs.sizeRect*6,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
	}
	
	public void drawDialogue() {
		//window
		g2.setFont(purisaB);
		int x=gs.sizeRect*3;
		int y=gs.sizeRect*7;
		int width=gs.screenWidth - (gs.sizeRect*6);
		int height= gs.sizeRect*4;
		
		drawSubWind(x, y, width, height);
		
		x += gs.sizeRect;
		y += gs.sizeRect+5;
		
		for(String line : currentDialogue.split("\n")) {
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,38));
			  g2.drawString(line, x, y); y +=52; 
			  }
		/*
		g2.setColor(new Color(0,0,0));
		String enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7, gs.sizeRect*5); 
		
		g2.setColor(new Color(252, 127, 3));
		enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7+3, gs.sizeRect*5+3);
		*/
	}
	
	public void drawSubWind(int x, int y , int width, int height) {
		Color c= new Color(252, 127, 3,200);
		g2.setColor(c);
		g2.fillRoundRect(x, y, width, height, 35, 35);
		
		c= new Color(0,0,0);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(5));
		g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);
		
	}
	
	public void drawPause() {
		g2.setFont(purisaB);
		//g2.setColor(Color.white);
		g2.setColor(Color.black);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,50));
		String text="PAUZA";
		int x= getXforCenteredText(text);
				
		
		int y= gs.screenHeight/2;
		
		g2.drawString(text, x, y);

		g2.setColor(new Color(252, 127, 3));
		x= getXforCenteredText(text);		
		y= gs.screenHeight/2;
		
		g2.drawString(text, x+3, y+3);
	}
	
	public int getXforCenteredText(String text) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=gs.screenWidth/2 - length/2;
		return x;
	}
	
	public int getXforAlignToRightText(String text,int tailX) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=tailX - length;
		return x;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-01 09:19:45.856
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-01 09:19:45.857
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-01 09:19:46.015
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.print.attribute.Size2DSyntax;

import characters.Characters;
import objects.OBJ_Heart;
import objects.OBJ_ManaBEER;
import objects.OBJ_Uniza_Coin;

public class UserInterf {

	GameScreen gs;
	UtilityTool uTool = new UtilityTool();
	Graphics2D g2;
	public Font purisaB;
	BufferedImage keyImage;
	BufferedImage uniza_heartF,ovca, uniza_heartH,uniza_heartB,beer_full ,beer_blank,unyza,monster,stuff11,stuff22,coin;
	public boolean messageOn = false;
	//public String message = "";
	//int messageCounter=0;
	ArrayList<String>message = new ArrayList<>();
	ArrayList<Integer>messageCount = new ArrayList<>();
	public boolean gameFinish=false;
	double playTIME;
	DecimalFormat dFormat = new DecimalFormat("#0.00");
	public String currentDialogue = "";
	public int selectedNum = 0;
	public int titleScreenState=0; // 0 firstScreen,  1 secondScreen
	public int playerSlotCol=0;
	public int playerSlotRow=0;
	public int npcSlotRow=0;
	public int npcSlotCol=0;
	int subState=0;
	int tranCounter =0;
	public Characters npc;
	
	
	public UserInterf(GameScreen gs) {
		this.gs=gs;
		
		
		try {
			InputStream is = getClass().getResourceAsStream("/font/purisa.ttf");
			purisaB = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//hearts
		Characters heart = new OBJ_Heart(gs);
		uniza_heartF = heart.image;
		uniza_heartH = heart.image2;
		uniza_heartB = heart.image3;
		
		Characters beer = new OBJ_ManaBEER(gs);
		beer_full = beer.image;
		beer_blank= beer.image2;
		
		Characters coin1= new OBJ_Uniza_Coin(gs);
		coin=coin1.down1;
	}
	
	public void addMessage(String text) {
		message.add(text);
		messageCount.add(0);
	}
	
	
	public void draw(Graphics2D g2) {
		this.g2=g2;
		
		g2.setColor(Color.white);
		
		//title
		if(gs.gameStates == gs.titleState) {
			drawTittleScreen();
		}
		
		//play
		if(gs.gameStates == gs.huntState) {
			drawLife();
			drawMessage();
		}
		
		//pause
		if(gs.gameStates == gs.pauseState) {
			drawLife();
			drawPause();
		}
		
		//dialogue
		if(gs.gameStates == gs.dialogState) {
			//drawLife();
			drawDialogue();
		}
		
		//character
		if(gs.gameStates == gs.characterState) {
			drawCharScreen();
			drawInventory(gs.player, true);
		}
		
		//options
		if(gs.gameStates == gs.optionState) {
			drawOptionsScreen();
		}
		
		//gameOver
		if(gs.gameStates == gs.gameOverState) {
			gs.stopMusic();
			drawGameOverScreen();
		}
		
		//transition state
		if(gs.gameStates == gs.transitionState) {
			drawTransition();
		}
		
		//transition state
		if(gs.gameStates == gs.tradingState) {
			drawTradingScreen();
		}
		
		//sleep state
		if(gs.gameStates == gs.sleepState) {
			drawSleepScreen();
		}
	}
	
	public void drawLife() {
		
		int x = gs.sizeRect;
		int y = gs.sizeRect - (gs.sizeRect/2);
		
		int i=0;
		
		//draw max life
		while(i <gs.player.maxLife/2) {
			g2.drawImage(uniza_heartB, x, y, null);
			i++;
			x+= gs.sizeRect;
		}
		
		//reset
		x = gs.sizeRect;
		y = gs.sizeRect - (gs.sizeRect/2);
		
		i=0;
		
		//current life
		while(i<gs.player.life) {
			g2.drawImage(uniza_heartH, x, y, null);
			i++;
			if(i <gs.player.life) {
				g2.drawImage(uniza_heartF, x, y, null);
			}
			i++;
			x += gs.sizeRect;
		}
		
		
		//max beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.maxMana) {
			g2.drawImage(beer_blank, x, y, null);
			i++;
			x+=35;
		}
		
		//beer
		x = gs.sizeRect;
		y = gs.sizeRect +20;
		i=0;
		
		while(i < gs.player.mana) {
			g2.drawImage(beer_full, x, y, null);
			i++;
			x+=35;
		}
		
	}
	
	public void drawTransition() {
		tranCounter++;
		g2.setColor(new Color(0,0,0,tranCounter*5));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		if(tranCounter == 50) {
			tranCounter= 0;
			gs.gameStates = gs.huntState;
			gs.currentMap = gs.events.tempMap;
			gs.player.worldX = gs.sizeRect * gs.events.tempCol;
			gs.player.worldY = gs.sizeRect * gs.events.tempRow;
			gs.events.previousEveX = gs.player.worldX;
			gs.events.previousEveY = gs.player.worldY;
		}
	}
	
	public void drawOptionsScreen() {
		g2.setColor(Color.white);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		//sub window
		
		int frameX = gs.sizeRect *6;
		int frameY= gs.sizeRect;
		int frameWidth= gs.sizeRect *8;
		int frameHeight= gs.sizeRect *10;
		
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		switch(subState) {
		case 0: optionsTop(frameX,frameY); break;
		case 1: options_fullScrNotif(frameX, frameY);break;
		case 2: options_control(frameX, frameY); break;
		case 3: options_endGameConf(frameX, frameY); break;
		}
		
		gs.keys.enterPress = false;
	}
	
	public void optionsTop(int frameX, int frameY) {
		int textX;
		int textY;
		
		String text = "MOŽNOSTI";
		
		textX= getXforCenteredText(text);
		textY= frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		
		//full screen
		textX= frameX + gs.sizeRect;
		textY += gs.sizeRect*2;
		g2.drawString("FULL SCREEN" , textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				if(gs.fullscreenOn == false) {
					gs.fullscreenOn = true;
				}else if(gs.fullscreenOn == true) {
					gs.fullscreenOn = false;
				}
				subState = 1;
			}
		}
		
		//music
		textY+=gs.sizeRect;
		g2.drawString("HUDBA", textX, textY);
		if(selectedNum == 1) {
			g2.drawString(">", textX-25, textY);
		}
		
		//se
		textY+=gs.sizeRect;
		g2.drawString("EFEKTY", textX, textY);
		if(selectedNum == 2) {
			g2.drawString(">", textX-25, textY);
		}
		
		//control
		textY+=gs.sizeRect;
		g2.drawString("OVLÁDANIE", textX, textY);
		if(selectedNum == 3) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState =2;
				selectedNum=0;
			}
		}
		
		
		//end game
		textY+=gs.sizeRect;
		g2.drawString("KONEC HRY", textX, textY);
		if(selectedNum == 4) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=3;
				selectedNum = 0;
			}
		}
		
		
		//back
		textY+=gs.sizeRect*2;
		g2.drawString("SPÄŤ", textX, textY);
		if(selectedNum == 5) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				gs.gameStates= gs.huntState;
				selectedNum=0;
			}
		}
		
		//full screen box
		textX= frameX+ gs.sizeRect*6;
		textY= frameY+ gs.sizeRect*2 + 24;
		g2.setStroke(new BasicStroke(3));
		g2.drawRect(textX, textY, 24, 24);
		if(gs.fullscreenOn == true) {
			g2.fillRect(textX, textY, 24, 24);
		}
		
		//music volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24); // 120 /5 = 24 
		
		int volimeWidth = 24*gs.music.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		//se volume
		textX= frameX+ gs.sizeRect*4;
		textY += gs.sizeRect;
		g2.drawRect(textX, textY, 120, 24);
		volimeWidth = 24*gs.se.volumeScale;
		g2.fillRect(textX, textY, volimeWidth, 24);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect-10;
		
		g2.drawImage(ovca,textX , textY,null);
		
		textX= frameX+ gs.sizeRect*6;
		textY += gs.sizeRect;
		
		g2.drawImage(ovca,textX , textY,null);
		
		
		gs.config.saveConf();

		
	}
	
	public void options_control(int frameX, int frameY) {
		String text = "OVLÁDANIE";
		int textX = getXforCenteredText(text);
		int textY = frameY + gs.sizeRect;
		g2.drawString(text, textX, textY);
		g2.setFont(g2.getFont().deriveFont(19F));
		
		
		
		textX = frameX + gs.sizeRect;
		textY+= gs.sizeRect;
		
		g2.drawString("POHYB", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("ÚTOK", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("STREĽBA", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("INVENTOR", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("PAUZA", textX, textY);
		textY+= gs.sizeRect;
		
		g2.drawString("MOŽNOSTI", textX, textY);
		textY+= gs.sizeRect;
		
		//back
		textX = frameX + gs.sizeRect;
		textY = frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum == 0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum=3;
			}
		}
		
		textX = frameX + gs.sizeRect*5;
		textY = frameY + gs.sizeRect*2;
		g2.setColor(Color.GRAY);
		
		g2.drawString("WASD", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ENTER", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("F", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("C", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("P", textX, textY);
		textY+= gs.sizeRect;
		g2.drawString("ESCAPE", textX, textY);
		textY+= gs.sizeRect;
		
		
		
	}
	
	public void options_endGameConf(int frameX,int frameY) {
		int textX = frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect*3;
		
		currentDialogue = "Odíd, ale hra nebude \nuložená!!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//yes 
		String text = "ANO";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect*3;
		g2.drawString(text, textX, textY);
		if(selectedNum==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				gs.gameStates = gs.titleState;
				titleScreenState = 0;
				gs.stopMusic();
				gs.restart();
			}
		}
		
		//no
		
		text = "NIE";
		textX = getXforCenteredText(text);
		textY += gs.sizeRect;
		g2.drawString(text, textX, textY);
		if(selectedNum==1) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
				selectedNum = 4;
			}
		}
	}
	
	public void options_fullScrNotif(int frameX, int frameY) {
		int textX= frameX + gs.sizeRect;
		int textY= frameY + gs.sizeRect;
		
		currentDialogue = "The change will take \neffect after \nrestarting the game!";
		
		for(String line: currentDialogue.split("\n")) {
			g2.drawString(line, textX, textY);
			textY+= 40;
		}
		
		//back
		textY= frameY + gs.sizeRect*9;
		g2.drawString("BACK", textX, textY);
		if(selectedNum ==0) {
			g2.drawString(">", textX-25, textY);
			if(gs.keys.enterPress == true) {
				subState=0;
			}
		}
	}
	
	public void drawMessage() {
		int messX = gs.sizeRect;
		int messY = gs.sizeRect*6;
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,28F));
		
		for(int i =0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.black);
				g2.drawString(message.get(i),messX,messY);
				
				g2.setColor(new Color(252, 127, 3,200));
				g2.drawString(message.get(i),messX+2,messY+2);
				
				int counter = messageCount.get(i) +1;	// messageCounter++
				messageCount.set(i, counter);			//set the counter to the array
				messY += 50;
				
				if(messageCount.get(i) > 180) {
					message.remove(i);
					messageCount.remove(i);
				}
			}
		}
	}
	
	public void drawSleepScreen() {
		tranCounter++;
		
		if(tranCounter <120) {
			gs.eManag.light.filterAlpha += 0.01f;
			if(gs.eManag.light.filterAlpha > 1f) {
				gs.eManag.light.filterAlpha = 1f;
			}
		}
		if(tranCounter >= 120) {
			gs.eManag.light.filterAlpha -0
		}
	}
	
	public void drawCharScreen() {
		
		//window frame
		final int frameX = gs.sizeRect ;
		final int frameY = gs.sizeRect;
		final int frameWidth = gs.sizeRect*5;
		final int frameHeight = gs.sizeRect * 10;
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//text
		g2.setColor(Color.black);
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(24F));
		
		int textX = frameX + 20;
		int textY = frameY+gs.sizeRect;
		final int lineHeight = 35;
		
		//names
		g2.drawString("Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Život", textX, textY);
		textY += lineHeight;
		g2.drawString("Mana", textX, textY);
		textY += lineHeight;
		g2.drawString("Sila", textX, textY);
		textY += lineHeight;
		g2.drawString("Obratnosť", textX, textY);
		textY += lineHeight;
		g2.drawString("Útok", textX, textY);
		textY += lineHeight;
		g2.drawString("Obrana", textX, textY);
		textY += lineHeight;
		g2.drawString("Exp", textX, textY);
		textY += lineHeight;
		g2.drawString("Další Level", textX, textY);
		textY += lineHeight;
		g2.drawString("Dolár", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Zbraň", textX, textY);
		textY += lineHeight+15;
		g2.drawString("Štít", textX, textY);
		textY += lineHeight;
		
		
		//values 
		int tailX = (frameX + frameWidth)- 30;
		//reset
		textY = frameY + gs.sizeRect;
		String value;
		
		
		value= String.valueOf(gs.player.level);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.life +"/"+ gs.player.maxLife);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.mana +"/"+ gs.player.maxMana);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.strength);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.dexterity);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.attack);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		
		value= String.valueOf(gs.player.defense);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.exp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.nextLevelExp);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
		value= String.valueOf(gs.player.coin);
		textX = getXforAlignToRightText(value, tailX);
		g2.drawString(value, textX, textY);
		textY += 15;
		
		g2.drawImage(gs.player.currentWeapon.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		g2.drawImage(gs.player.currentShield.down1, tailX-gs.sizeRect, textY, null);
		textY += gs.sizeRect;
		
		
		
	}
	
	public void drawGameOverScreen() {
		
		g2.setColor(new Color(0,0,0,150));
		g2.fillRect(0, 0, gs.screenWidth, gs.screenHeight);
		
		int x;
		int y;
		String text;
		
		g2.setFont(purisaB);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,110f));
		
		text = "GAME OVER!";
		
		g2.setColor(Color.black);
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		x=getXforCenteredText(text);
		y=gs.sizeRect*4;
		g2.drawString(text, x+5, y+5);
		
		//retry
		g2.setFont(g2.getFont().deriveFont(50f));
		g2.setColor(Color.black);
		text="Skúsiť znova!";
		x =getXforCenteredText(text);
		y +=gs.sizeRect*4;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 0) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
		//quit
		g2.setColor(Color.black);
		text="Ukončiť hru!";
		x =getXforCenteredText(text);
		y += 60;
		g2.drawString(text, x, y);
		
		g2.setColor(new Color(252, 127, 3,200));
		g2.drawString(text, x+4, y+4);
		if(selectedNum == 1) {
			g2.setColor(Color.black);
			g2.drawString(">", x-gs.sizeRect, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(">", x-gs.sizeRect+4, y+4);
		}
		
	}
	
	public void drawTradingScreen() {
		
		switch(subState) {
		case 0: trade_select();break;
		case 1: trade_buy();break;
		case 2: trade_sell();break;
		}
		gs.keys.enterPress = false;
	}
	
	public void trade_select() {
		int x,y,width,height;
		drawDialogue();
		g2.setFont(g2.getFont().deriveFont(50f));
		String uniza = "SPONZORYNG FEYT UNYZA!";
		x= gs.sizeRect;
		y=gs.sizeRect*2;
		g2.drawString(uniza, x, y);
		
		g2.setColor(new Color(252, 127, 3));
		g2.drawString(uniza, x+4, y+4);
		
		//draw window
		x= gs.sizeRect *14;
		y= gs.sizeRect *3;
		
		width= gs.sizeRect*3;
		height= (int)(gs.sizeRect * 3.5);
		
		drawSubWind(x, y, width, height);
		
		//draw texts
		g2.setFont(g2.getFont().deriveFont(26f));
		
		x += gs.sizeRect;
		y += gs.sizeRect;
		g2.drawString("Kúpa", x-15, y);
		if(selectedNum == 0) {
			g2.drawString(">", x-34, y);
			if(gs.keys.enterPress == true) {
				subState = 1;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Predaj", x-15, y);
		if(selectedNum == 1) {
			g2.drawString(">", x-34, y);
			if(gs.keys.enterPress == true) {
				subState = 2;
			}
		}
		y += gs.sizeRect;
		g2.drawString("Späť", x-15, y);
		if(selectedNum == 2) {
			g2.drawString(">", x-34, y);
			if(gs.keys.enterPress == true) {
				selectedNum = 0;
				gs.gameStates = gs.dialogState;
				currentDialogue = "Maj sa, nabudúce kúp \nteho vác";
			}
		}
		
	}
	
	public void trade_buy() {
		
		//draw player inventory
		drawInventory(gs.player, false);
		//draw npc inventory
		drawInventory(npc, true);
		
		//draw hint window
		int x = gs.sizeRect*2;
		int y = gs.sizeRect*9+15;
		int width = gs.sizeRect*6;
		int height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Späť", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Doláros: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(npcSlotCol, npcSlotRow);
		if(itemIndex < npc.inventory.size()) {
			x=(int)(gs.sizeRect*5.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = npc.inventory.get(itemIndex).price;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*8-20);
			g2.drawString(text, x, y+30);
			
			
			
			//BUYING ITEMS
			if(gs.keys.enterPress == true) {
				if(npc.inventory.get(itemIndex).price > gs.player.coin) {
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue = "Nemáš love , čo by si \nchcel?";
					drawDialogue();
				}else {
					if(gs.player.canObtainItem(npc.inventory.get(itemIndex)) == true) {
						gs.player.coin -= npc.inventory.get(itemIndex).price;
					}else {
						subState=0;
						gs.gameStates = gs.dialogState;
						currentDialogue = "Maš plné vrecka čo ty \nchceš!";
					}
				}
			}
		}
	}
	
	public void trade_sell() {
		//draw player invetory
		
		drawInventory(gs.player, true);
		int x;
		int y;
		int width;
		int height;
		
		//draw hint window
		x = gs.sizeRect*2;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("[ESC] Späť", x+24, y+55);
		
		//draw npc  coin window
		x = gs.sizeRect*11;
		y = gs.sizeRect*9+15;
		width = gs.sizeRect*6;
		height = gs.sizeRect*2;
		drawSubWind(x, y, width, height);
		g2.drawString("Doláros: "+gs.player.coin, x+24, y+55);
		
		//DRAW price WINDOW
		int itemIndex= getItemIndexOnSlot(playerSlotCol, playerSlotRow);
		if(itemIndex < gs.player.inventory.size()) {
			x=(int)(gs.sizeRect*14.5);
			y=(int)(gs.sizeRect*5.5);
			width = (int)(gs.sizeRect*2.5);
			height = gs.sizeRect;
			drawSubWind(x, y, width, height);
			g2.drawImage(coin, x+10	, y+8, 32,32,null);
			
			int price = gs.player.inventory.get(itemIndex).price/2;
			
			String text = ""+price;
			x=getXforAlignToRightText(text, gs.sizeRect*17-20);
			g2.drawString(text, x, y+30);
			
			
			
			//selling ITEMS
			if(gs.keys.enterPress == true) {
				if(gs.player.inventory.get(itemIndex) == gs.player.currentWeapon || 
						gs.player.inventory.get(itemIndex) == gs.player.currentShield) {
					selectedNum=0;
					subState=0;
					gs.gameStates = gs.dialogState;
					currentDialogue= "Vybavené náradičko,\nnemôžeš predať!!!";
				}else {
					if(gs.player.inventory.get(itemIndex).amount > 1 ) {
						gs.player.inventory.get(itemIndex).amount--;
					}else {
						gs.player.inventory.remove(itemIndex);
					}
					gs.player.coin += price;
				}
					
			}
		}
	}
	
	public void drawInventory(Characters character, boolean cursor) {
		
		int frameX=0;
		int frameY=0;
		int frameWidth=0;
		int frameHeight=0;
		int slotCol=0;
		int slotRow=0;
		
		if(character == gs.player) {
			frameX = gs.sizeRect *11;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= playerSlotCol;
			slotRow= playerSlotRow;
		}else {
			frameX = gs.sizeRect *2;
			frameY = gs.sizeRect;
			frameWidth = gs.sizeRect*6;
			frameHeight = gs.sizeRect * 5;
			slotCol= npcSlotCol;
			slotRow= npcSlotRow;
		}
		g2.setFont(purisaB);
		//window frame
		drawSubWind(frameX, frameY, frameWidth, frameHeight);
		
		//SLot
		final int slotXstart= frameX + 20;
		final int slotYstart= frameY + 20;
		int slotX = slotXstart;
		int slotY = slotYstart;
		int slotSize= gs.sizeRect+3;
		
		//draw player items
		for(int i = 0; i < character.inventory.size(); i++) {
			//EQUIP cursor
			if(character.inventory.get(i)== character.currentWeapon || 
					character.inventory.get(i)== character.currentShield ||
					character.inventory.get(i)== character.currentLight) {
				g2.setColor(new Color(179,98,0));
				g2.fillRoundRect(slotX, slotY, gs.sizeRect, gs.sizeRect,10,10);
			}
			
			g2.drawImage(character.inventory.get(i).down1, slotX, slotY, null );
			
			//display amount
			if(character == gs.player && character.inventory.get(i).amount > 1) {
				g2.setFont(g2.getFont().deriveFont(32f));
				int amountX;
				int amountY;
				String s = ""+ character.inventory.get(i).amount;
				amountX=getXforAlignToRightText(s, slotX + 44);
				amountY= slotY + gs.sizeRect;
				
				//draw shadow number
				g2.setColor(new Color(60,60,60));
				g2.drawString(s, amountX, amountY);
				
				//number
				g2.setColor(Color.yellow
						);
				g2.drawString(s, amountX-3, amountY-3);
			}
			slotX += slotSize;
			
			if(i == 4 || i == 9 || i == 14){
				slotX = slotXstart;
				slotY += slotSize;
			}
		}
		
		// cursor
		if(cursor == true) {
			int cursorX = slotXstart + (slotSize * slotCol);
			int cursorY = slotYstart + (slotSize * slotRow);
			int cursorWidth = gs.sizeRect;
			int cursorHeight = gs.sizeRect;
			
			//draw cursor
			g2.setColor(new Color(169,169,169));
			//g2.fillRect(cursorX, cursorY, cursorWidth, cursorHeight);
			g2.setColor(Color.black);
			g2.setStroke(new BasicStroke(3));
			g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight,10 ,10);
			
			
			//DESCRIPTION FREAM
			int dFrameX=frameX;
			int dFrameY= frameY+frameHeight+10;
			int dFrameWidth= frameWidth;
			int dFrameHeight= gs.sizeRect*3;
			
			
			//text
			int textX = dFrameX+20;
			int textY= dFrameY+ gs.sizeRect;
			g2.setFont(g2.getFont().deriveFont(20F));
			
			int itemIndex = getItemIndexOnSlot(slotCol,slotRow);
			if(itemIndex < character.inventory.size()) {
				
				drawSubWind(dFrameX, dFrameY, dFrameWidth, dFrameHeight);
				
				for(String line : character.inventory.get(itemIndex).description.split("\n")) {
					g2.drawString(line, textX, textY);
					textY += 32;
				}
				
			}
		}
	}
	
	public int getItemIndexOnSlot(int slotCol, int slotRow) {
		int itemIndex = slotCol + (slotRow*5);
		return itemIndex;
	}
	
	public void drawTittleScreen() {
		if(titleScreenState == 0) {
			//background
			UtilityTool uTool = new UtilityTool();
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//tittle name
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,70));
			String text = "UNYZA ADVENTÜRE";
			int x = getXforCenteredText(text);
			int y = gs.sizeRect*3;
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+5, y+5);
			
			//ovca
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/ovca.png"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth-30, gs.screenHeight-30);
				//g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			x = (gs.sizeRect*8)- (gs.sizeRect/3) ;
			y = gs.sizeRect*2;
			g2.drawImage(unyza, x, y,gs.sizeRect-10, gs.sizeRect-10,null);
			
			
			
			//text gandalf
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			x=gs.screenWidth/2 + (gs.sizeRect*2);
			y += gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString("Skúl Gandalf", x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			
			g2.drawString("Skúl Gandalf", x+4, y+4);
			
			
			
			//gandalf
			x=gs.screenWidth/2 + (gs.sizeRect*3);
			y += gs.sizeRect;
			
			try {
				BufferedImage monster2 = ImageIO.read(getClass().getResourceAsStream("/img/oldman_down_1.png"));
				monster= uTool.scaleImage(monster2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(monster, x, y,gs.sizeRect*3, gs.sizeRect*3,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			//monster
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,42));
			
			
			
			text = "Nová hra";
			x = gs.sizeRect*2;
			y = gs.sizeRect *7+10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Načítaj";
			x = gs.sizeRect*2;
			y += gs.sizeRect+5;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Možnosti";
			x = gs.sizeRect*2;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 2) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
			
			
			text = "Ukončiť hru";
			x = gs.sizeRect*2;
			y += gs.sizeRect+5;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+4, y+4);
			if(selectedNum == 3) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+4, y+4);
			}
		}
		else if(titleScreenState == 1) {
			g2.setFont(purisaB);
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			
			try {
				BufferedImage uniza = ImageIO.read(getClass().getResourceAsStream("/img/uniza1111.jpg"));
				unyza= uTool.scaleImage(uniza, gs.screenWidth, gs.screenHeight);
				g2.drawImage(uniza, 0, 0, null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			String text = "";
			int x;
			int y=0;
			
			text="Hrať";
			x = gs.sizeRect;
			y += gs.sizeRect*10;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			if(selectedNum == 0) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
			}
			text="Späť";
			x = gs.sizeRect;
			y += gs.sizeRect;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			if(selectedNum == 1) {
				g2.setColor(Color.black);
				g2.drawString(">", x-gs.sizeRect, y);
				g2.setColor(Color.decode("#FF742c"));
				g2.drawString(">", x-gs.sizeRect+3, y+3);
				
			}
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,40));
			text = "Krycia prezývka : " + gs.id;
			x = gs.sizeRect- (gs.sizeRect/2);
			y = gs.sizeRect*2;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,30));
			text = "Tvoja výbava, vagoš: ";
			x = gs.sizeRect - (gs.sizeRect/2);
			y = gs.sizeRect*4;
			g2.setColor(Color.black);
			g2.drawString(text, x, y);
			g2.setColor(Color.decode("#FF742c"));
			g2.drawString(text, x+3, y+3);
			
			x=gs.screenWidth - (gs.sizeRect*6);
			y=gs.sizeRect;
			
			try {
				BufferedImage stuff1 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff.png"));
				stuff11= uTool.scaleImage(stuff1, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff11, x, y,gs.sizeRect*5, gs.sizeRect*10,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			x=gs.screenWidth - (gs.sizeRect*12);
			y=gs.sizeRect*5;
			
			try {
				BufferedImage stuff2 = ImageIO.read(getClass().getResourceAsStream("/img/deafaultStuff2.png"));
				stuff22= uTool.scaleImage(stuff2, gs.screenWidth, gs.screenHeight);
				g2.drawImage(stuff22, x, y,gs.sizeRect*5, gs.sizeRect*6,null);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
	}
	
	public void drawDialogue() {
		//window
		g2.setFont(purisaB);
		int x=gs.sizeRect*3;
		int y=gs.sizeRect*7;
		int width=gs.screenWidth - (gs.sizeRect*6);
		int height= gs.sizeRect*4;
		
		drawSubWind(x, y, width, height);
		
		x += gs.sizeRect;
		y += gs.sizeRect+5;
		
		for(String line : currentDialogue.split("\n")) {
			g2.setFont(g2.getFont().deriveFont(Font.BOLD,38));
			  g2.drawString(line, x, y); y +=52; 
			  }
		/*
		g2.setColor(new Color(0,0,0));
		String enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7, gs.sizeRect*5); 
		
		g2.setColor(new Color(252, 127, 3));
		enter = "Press enter!";
		g2.drawString(enter, gs.sizeRect*7+3, gs.sizeRect*5+3);
		*/
	}
	
	public void drawSubWind(int x, int y , int width, int height) {
		Color c= new Color(252, 127, 3,200);
		g2.setColor(c);
		g2.fillRoundRect(x, y, width, height, 35, 35);
		
		c= new Color(0,0,0);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(5));
		g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);
		
	}
	
	public void drawPause() {
		g2.setFont(purisaB);
		//g2.setColor(Color.white);
		g2.setColor(Color.black);
		g2.setFont(g2.getFont().deriveFont(Font.BOLD,50));
		String text="PAUZA";
		int x= getXforCenteredText(text);
				
		
		int y= gs.screenHeight/2;
		
		g2.drawString(text, x, y);

		g2.setColor(new Color(252, 127, 3));
		x= getXforCenteredText(text);		
		y= gs.screenHeight/2;
		
		g2.drawString(text, x+3, y+3);
	}
	
	public int getXforCenteredText(String text) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=gs.screenWidth/2 - length/2;
		return x;
	}
	
	public int getXforAlignToRightText(String text,int tailX) {
		int length =(int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x=tailX - length;
		return x;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-01 09:19:46.016
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-01 09:19:46.018
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-12-01 13:17:24.411 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=19.0.1
java.vendor=BellSoft
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-01 13:17:51.337
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-01 13:17:51.337
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-01 13:17:51.337
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-01 13:17:57.976
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-04 11:45:53.374 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=19.0.1
java.vendor=BellSoft
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=sk_SK
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-12-04 11:46:19.985
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-04 11:46:19.985
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-04 11:46:19.985
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-04 11:46:25.066
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\balaz'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
